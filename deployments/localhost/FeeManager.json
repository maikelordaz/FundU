{
  "address": "0x848c0fF71731CE5568e7ae9C4A8cfE0aE12642dc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_fee",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_protocolManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_USDC",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_USDT",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeCollected",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "FeeCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newManager",
          "type": "address"
        }
      ],
      "name": "NewFeeManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "newTransactionFee",
          "type": "uint8"
        }
      ],
      "name": "NewTransactionFee",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "collectFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProtocolManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTransactionFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        }
      ],
      "name": "mustHaveBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_protocolBalanceByToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newManager",
          "type": "address"
        }
      ],
      "name": "setNewFeeManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_newTransactionFee",
          "type": "uint8"
        }
      ],
      "name": "setNewTransactionFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenToWithdraw",
          "type": "address"
        }
      ],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcdc4455ec9beb4e76f81871877d587d2c2cbd2a58a6e75eabfb894c35b751a68",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x848c0fF71731CE5568e7ae9C4A8cfE0aE12642dc",
    "transactionIndex": 0,
    "gasUsed": "662341",
    "logsBloom": "0x
    "blockHash": "0x1f64bcba31049a1c019d82569b963e69d52f0e63fcf7638ebbf1945ef7c0747c",
    "transactionHash": "0xcdc4455ec9beb4e76f81871877d587d2c2cbd2a58a6e75eabfb894c35b751a68",
    "logs": [],
    "blockNumber": 53794142,
    "cumulativeGasUsed": "662341",
    "status": 1,
    "byzantium": true
  },
  "args": [
    2,
    "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
    "0xc96D9C5DAcBcACc47728E2494C0F83eA03a36507",
    "0xf33C53c7e37115220dCFA19ABFddAD19f06643ff"
  ],
  "numDeployments": 1,
  "solcInputHash": "19f9bdc3b47ef20c1cafb3c32355c921",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_fee\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_protocolManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeCollected\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"FeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"NewFeeManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newTransactionFee\",\"type\":\"uint8\"}],\"name\":\"NewTransactionFee\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"collectFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransactionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"mustHaveBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_protocolBalanceByToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"setNewFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_newTransactionFee\",\"type\":\"uint8\"}],\"name\":\"setNewTransactionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenToWithdraw\",\"type\":\"address\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"collectFee(uint256,address)\":{\"details\":\"No need to check depositAmount because the amount is require to be bigger than zero when you create a stream\",\"params\":{\"depositAmount\":\"the amount of fee collected\",\"tokenAddress\":\"the  token address\"}},\"constructor\":{\"params\":{\"_USDC\":\"USDC token address\",\"_USDT\":\"USDT token address\",\"_fee\":\"the transaction fee\",\"_protocolManager\":\"the address of the Protocol Manager\"}},\"setNewFeeManager(address)\":{\"params\":{\"_newManager\":\"the new manager\"}},\"setNewTransactionFee(uint8)\":{\"params\":{\"_newTransactionFee\":\"the new fee\"}},\"withdrawFees(address)\":{\"details\":\"It fails if there is no balance in the token\",\"params\":{\"tokenToWithdraw\":\"The token itself\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"collectFee(uint256,address)\":{\"notice\":\"Called when a stream or instant payment is created\"},\"setNewFeeManager(address)\":{\"notice\":\"a function to set new managers to control the fees\"},\"setNewTransactionFee(uint8)\":{\"notice\":\"a function to set new transaction fees\"},\"withdrawFees(address)\":{\"notice\":\"A method to withdraw balance from only one token\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/FeeManager.sol\":\"FeeManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/utils/FeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\ncontract FeeManager is ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    address private s_protocolManager;\\r\\n    address private s_feeManager;\\r\\n    uint8 private s_transactionFee;\\r\\n\\r\\n    // Tokens allowed on protocol\\r\\n    address private immutable i_USDC;\\r\\n    address private immutable i_USDT;\\r\\n\\r\\n    mapping(address => uint256) public s_protocolBalanceByToken; // tokenAddress => balance\\r\\n\\r\\n    event FeeCollected(uint256 feeCollected, address indexed token);\\r\\n    event NewFeeManager(address indexed newManager);\\r\\n    event NewTransactionFee(uint8 newTransactionFee);\\r\\n\\r\\n    /**\\r\\n     * @notice To check the fee manager is the appropiate\\r\\n     */\\r\\n    modifier onlyFeeManager() {\\r\\n        require(msg.sender == s_feeManager, \\\"FeeManager: Only the fee managers allowed\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice To check the protocol Manager is the appropiate\\r\\n     */\\r\\n    modifier onlyProtocolManager() {\\r\\n        require(\\r\\n            msg.sender == s_protocolManager,\\r\\n            \\\"FeeManager: Only the protocol manager is allowed\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param _protocolManager the address of the Protocol Manager\\r\\n     * @param _fee the transaction fee\\r\\n     * @param _USDC USDC token address\\r\\n     * @param _USDT USDT token address\\r\\n     */\\r\\n    constructor(uint8 _fee, address _protocolManager, address _USDC, address _USDT) {\\r\\n        require(_protocolManager != address(0x00), \\\"FeeManager: Invalid mannagers address\\\");\\r\\n        require(_fee != 0, \\\"FeeManager: Invalid fee\\\");\\r\\n\\r\\n        s_protocolManager = _protocolManager;\\r\\n        s_feeManager = _protocolManager;\\r\\n        s_transactionFee = _fee;\\r\\n\\r\\n        i_USDC = _USDC;\\r\\n        i_USDT = _USDT;\\r\\n    }\\r\\n\\r\\n    /*** MAIN FUNCTIONS ***/\\r\\n\\r\\n    /*** COLLECT FEES RELATED ***/\\r\\n    /**\\r\\n     * @notice Called when a stream or instant payment is created\\r\\n     * @param depositAmount the amount of fee collected\\r\\n     * @param tokenAddress the  token address\\r\\n     * @dev No need to check depositAmount because the amount is require to be bigger than zero\\r\\n     * when you create a stream\\r\\n     */\\r\\n    function collectFee(uint256 depositAmount, address tokenAddress) external {\\r\\n        uint256 _feeCollected = (depositAmount * s_transactionFee) / 100;\\r\\n\\r\\n        //uint256 _feeCollected = depositAmount - realAmount;\\r\\n\\r\\n        s_protocolBalanceByToken[tokenAddress] += _feeCollected;\\r\\n\\r\\n        IERC20 token = IERC20(tokenAddress);\\r\\n\\r\\n        token.safeTransferFrom(msg.sender, address(this), _feeCollected);\\r\\n\\r\\n        emit FeeCollected(_feeCollected, tokenAddress);\\r\\n    }\\r\\n\\r\\n    /*** REDEEM FEES COLLECTED RELATED ***/\\r\\n    /**\\r\\n     * @notice A method to withdraw balance from only one token\\r\\n     * @param tokenToWithdraw The token itself\\r\\n     * @dev It fails if there is no balance in the token\\r\\n     */\\r\\n    function withdrawFees(address tokenToWithdraw) external onlyFeeManager nonReentrant {\\r\\n        require(\\r\\n            s_protocolBalanceByToken[tokenToWithdraw] > 0,\\r\\n            \\\"FeeManager: Zero balance for this token\\\"\\r\\n        );\\r\\n\\r\\n        uint256 toWithdraw = s_protocolBalanceByToken[tokenToWithdraw];\\r\\n\\r\\n        s_protocolBalanceByToken[tokenToWithdraw] = 0;\\r\\n\\r\\n        IERC20 token = IERC20(tokenToWithdraw);\\r\\n\\r\\n        token.safeTransfer(s_feeManager, toWithdraw);\\r\\n    }\\r\\n\\r\\n    /*** NEW SETTINGS RELATED ***/\\r\\n    /**\\r\\n     * @notice a function to set new managers to control the fees\\r\\n     * @param _newManager the new manager\\r\\n     */\\r\\n    function setNewFeeManager(address _newManager) external onlyProtocolManager {\\r\\n        require(\\r\\n            _newManager != address(0x00) && _newManager != address(this),\\r\\n            \\\"FeeManager: Invalid manager address\\\"\\r\\n        );\\r\\n        s_feeManager = _newManager;\\r\\n        emit NewFeeManager(_newManager);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice a function to set new transaction fees\\r\\n     * @param _newTransactionFee the new fee\\r\\n     */\\r\\n    function setNewTransactionFee(uint8 _newTransactionFee) external onlyFeeManager {\\r\\n        require(_newTransactionFee != 0 && _newTransactionFee <= 100, \\\"FeeManager: Invalid fee\\\");\\r\\n\\r\\n        s_transactionFee = _newTransactionFee;\\r\\n        emit NewTransactionFee(_newTransactionFee);\\r\\n    }\\r\\n\\r\\n    /*** VIEW / PURE FUNCTIONS ***/\\r\\n\\r\\n    function mustHaveBalance(uint256 deposit) external view returns (uint256) {\\r\\n        uint256 needed = deposit + ((deposit * s_transactionFee) / 100);\\r\\n        return needed;\\r\\n    }\\r\\n\\r\\n    function getProtocolManager() external view returns (address) {\\r\\n        return s_protocolManager;\\r\\n    }\\r\\n\\r\\n    function getFeeManager() external view returns (address) {\\r\\n        return s_feeManager;\\r\\n    }\\r\\n\\r\\n    function getTransactionFee() external view returns (uint256) {\\r\\n        return s_transactionFee;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x942d91d78980f7d66ac5dcbb7460d16e6063de63d3424747f761e993542abbe4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610b82380380610b8283398101604081905261002f9161015f565b60016000556001600160a01b03831661009d5760405162461bcd60e51b815260206004820152602560248201527f4665654d616e616765723a20496e76616c6964206d616e6e6167657273206164604482015264647265737360d81b60648201526084015b60405180910390fd5b8360ff166000036100f05760405162461bcd60e51b815260206004820152601760248201527f4665654d616e616765723a20496e76616c6964206665650000000000000000006044820152606401610094565b600180546001600160a01b039485166001600160a01b031990911681179091556002805460ff909616600160a01b026001600160a81b03199096169091179490941790935581166080521660a0526101bb565b80516001600160a01b038116811461015a57600080fd5b919050565b6000806000806080858703121561017557600080fd5b845160ff8116811461018657600080fd5b935061019460208601610143565b92506101a260408601610143565b91506101b060608601610143565b905092959194509250565b60805160a0516109a86101da60003960005050600050506109a86000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80637ff7b0d2116100665780637ff7b0d21461011857806385d791021461012b578063c4f367341461013d578063da0e591014610150578063f2d638261461016357600080fd5b8063164e68de14610098578063167976be146100ad57806361e8348b146100d75780636ecc7b4814610105575b600080fd5b6100ab6100a63660046107f3565b610174565b005b6001546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6100f76100e53660046107f3565b60036020526000908152604090205481565b6040519081526020016100ce565b6100ab6101133660046107f3565b610265565b6100ab61012636600461080e565b61039b565b600254600160a01b900460ff166100f7565b6100ab61014b36600461083a565b610454565b6100f761015e36600461085d565b610534565b6002546001600160a01b03166100ba565b6002546001600160a01b031633146101a75760405162461bcd60e51b815260040161019e90610876565b60405180910390fd5b6101af61056e565b6001600160a01b0381166000908152600360205260409020546102245760405162461bcd60e51b815260206004820152602760248201527f4665654d616e616765723a205a65726f2062616c616e636520666f722074686960448201526639903a37b5b2b760c91b606482015260840161019e565b6001600160a01b0380821660008181526003602052604081208054919055600254909284926102569290911684610598565b50506102626001600055565b50565b6001546001600160a01b031633146102d85760405162461bcd60e51b815260206004820152603060248201527f4665654d616e616765723a204f6e6c79207468652070726f746f636f6c206d6160448201526f1b9859d95c881a5cc8185b1b1bddd95960821b606482015260840161019e565b6001600160a01b038116158015906102f957506001600160a01b0381163014155b6103515760405162461bcd60e51b815260206004820152602360248201527f4665654d616e616765723a20496e76616c6964206d616e61676572206164647260448201526265737360e81b606482015260840161019e565b600280546001600160a01b0319166001600160a01b0383169081179091556040517f772ddcfc9a0f3b1401c0f60000a81999005d9d593b71bb67707c5f326eb7c94d90600090a250565b6002546000906064906103b890600160a01b900460ff16856108d5565b6103c291906108ec565b6001600160a01b0383166000908152600360205260408120805492935083929091906103ef90849061090e565b9091555082905061040b6001600160a01b0382163330856105fc565b826001600160a01b03167ff10cda68996dfb656d49ab0db3c62cc5f0849710633671a337171c3ad92551868360405161044691815260200190565b60405180910390a250505050565b6002546001600160a01b0316331461047e5760405162461bcd60e51b815260040161019e90610876565b60ff811615801590610494575060648160ff1611155b6104e05760405162461bcd60e51b815260206004820152601760248201527f4665654d616e616765723a20496e76616c696420666565000000000000000000604482015260640161019e565b6002805460ff60a01b1916600160a01b60ff8416908102919091179091556040519081527f2e987cc666d374ad58560cbe028ec20c176cd2613b8d4286050a205b61b639849060200160405180910390a150565b600254600090819060649061055390600160a01b900460ff16856108d5565b61055d91906108ec565b610567908461090e565b9392505050565b60026000540361059157604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6040516001600160a01b038381166024830152604482018390526105f791859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505061063b565b505050565b6040516001600160a01b0384811660248301528381166044830152606482018390526106359186918216906323b872dd906084016105c5565b50505050565b60006106506001600160a01b0384168361069e565b905080516000141580156106755750808060200190518101906106739190610921565b155b156105f757604051635274afe760e01b81526001600160a01b038416600482015260240161019e565b60606106ac838360006106b5565b90505b92915050565b6060814710156106da5760405163cd78605960e01b815230600482015260240161019e565b600080856001600160a01b031684866040516106f69190610943565b60006040518083038185875af1925050503d8060008114610733576040519150601f19603f3d011682016040523d82523d6000602084013e610738565b606091505b5091509150610748868383610752565b9695505050505050565b60608261076757610762826107ae565b610567565b815115801561077e57506001600160a01b0384163b155b156107a757604051639996b31560e01b81526001600160a01b038516600482015260240161019e565b5080610567565b8051156107be5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b80356001600160a01b03811681146107ee57600080fd5b919050565b60006020828403121561080557600080fd5b6106ac826107d7565b6000806040838503121561082157600080fd5b82359150610831602084016107d7565b90509250929050565b60006020828403121561084c57600080fd5b813560ff8116811461056757600080fd5b60006020828403121561086f57600080fd5b5035919050565b60208082526029908201527f4665654d616e616765723a204f6e6c792074686520666565206d616e616765726040820152681cc8185b1b1bddd95960ba1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176106af576106af6108bf565b60008261090957634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156106af576106af6108bf565b60006020828403121561093357600080fd5b8151801515811461056757600080fd5b6000825160005b81811015610964576020818601810151858301520161094a565b50600092019182525091905056fea264697066735822122029841aaa1613d59c8301c3efccdb1b95c3ad28858b30933b5600f5bd3e9e9feb64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80637ff7b0d2116100665780637ff7b0d21461011857806385d791021461012b578063c4f367341461013d578063da0e591014610150578063f2d638261461016357600080fd5b8063164e68de14610098578063167976be146100ad57806361e8348b146100d75780636ecc7b4814610105575b600080fd5b6100ab6100a63660046107f3565b610174565b005b6001546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6100f76100e53660046107f3565b60036020526000908152604090205481565b6040519081526020016100ce565b6100ab6101133660046107f3565b610265565b6100ab61012636600461080e565b61039b565b600254600160a01b900460ff166100f7565b6100ab61014b36600461083a565b610454565b6100f761015e36600461085d565b610534565b6002546001600160a01b03166100ba565b6002546001600160a01b031633146101a75760405162461bcd60e51b815260040161019e90610876565b60405180910390fd5b6101af61056e565b6001600160a01b0381166000908152600360205260409020546102245760405162461bcd60e51b815260206004820152602760248201527f4665654d616e616765723a205a65726f2062616c616e636520666f722074686960448201526639903a37b5b2b760c91b606482015260840161019e565b6001600160a01b0380821660008181526003602052604081208054919055600254909284926102569290911684610598565b50506102626001600055565b50565b6001546001600160a01b031633146102d85760405162461bcd60e51b815260206004820152603060248201527f4665654d616e616765723a204f6e6c79207468652070726f746f636f6c206d6160448201526f1b9859d95c881a5cc8185b1b1bddd95960821b606482015260840161019e565b6001600160a01b038116158015906102f957506001600160a01b0381163014155b6103515760405162461bcd60e51b815260206004820152602360248201527f4665654d616e616765723a20496e76616c6964206d616e61676572206164647260448201526265737360e81b606482015260840161019e565b600280546001600160a01b0319166001600160a01b0383169081179091556040517f772ddcfc9a0f3b1401c0f60000a81999005d9d593b71bb67707c5f326eb7c94d90600090a250565b6002546000906064906103b890600160a01b900460ff16856108d5565b6103c291906108ec565b6001600160a01b0383166000908152600360205260408120805492935083929091906103ef90849061090e565b9091555082905061040b6001600160a01b0382163330856105fc565b826001600160a01b03167ff10cda68996dfb656d49ab0db3c62cc5f0849710633671a337171c3ad92551868360405161044691815260200190565b60405180910390a250505050565b6002546001600160a01b0316331461047e5760405162461bcd60e51b815260040161019e90610876565b60ff811615801590610494575060648160ff1611155b6104e05760405162461bcd60e51b815260206004820152601760248201527f4665654d616e616765723a20496e76616c696420666565000000000000000000604482015260640161019e565b6002805460ff60a01b1916600160a01b60ff8416908102919091179091556040519081527f2e987cc666d374ad58560cbe028ec20c176cd2613b8d4286050a205b61b639849060200160405180910390a150565b600254600090819060649061055390600160a01b900460ff16856108d5565b61055d91906108ec565b610567908461090e565b9392505050565b60026000540361059157604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6040516001600160a01b038381166024830152604482018390526105f791859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505061063b565b505050565b6040516001600160a01b0384811660248301528381166044830152606482018390526106359186918216906323b872dd906084016105c5565b50505050565b60006106506001600160a01b0384168361069e565b905080516000141580156106755750808060200190518101906106739190610921565b155b156105f757604051635274afe760e01b81526001600160a01b038416600482015260240161019e565b60606106ac838360006106b5565b90505b92915050565b6060814710156106da5760405163cd78605960e01b815230600482015260240161019e565b600080856001600160a01b031684866040516106f69190610943565b60006040518083038185875af1925050503d8060008114610733576040519150601f19603f3d011682016040523d82523d6000602084013e610738565b606091505b5091509150610748868383610752565b9695505050505050565b60608261076757610762826107ae565b610567565b815115801561077e57506001600160a01b0384163b155b156107a757604051639996b31560e01b81526001600160a01b038516600482015260240161019e565b5080610567565b8051156107be5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b80356001600160a01b03811681146107ee57600080fd5b919050565b60006020828403121561080557600080fd5b6106ac826107d7565b6000806040838503121561082157600080fd5b82359150610831602084016107d7565b90509250929050565b60006020828403121561084c57600080fd5b813560ff8116811461056757600080fd5b60006020828403121561086f57600080fd5b5035919050565b60208082526029908201527f4665654d616e616765723a204f6e6c792074686520666565206d616e616765726040820152681cc8185b1b1bddd95960ba1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176106af576106af6108bf565b60008261090957634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156106af576106af6108bf565b60006020828403121561093357600080fd5b8151801515811461056757600080fd5b6000825160005b81811015610964576020818601810151858301520161094a565b50600092019182525091905056fea264697066735822122029841aaa1613d59c8301c3efccdb1b95c3ad28858b30933b5600f5bd3e9e9feb64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "collectFee(uint256,address)": {
        "details": "No need to check depositAmount because the amount is require to be bigger than zero when you create a stream",
        "params": {
          "depositAmount": "the amount of fee collected",
          "tokenAddress": "the  token address"
        }
      },
      "constructor": {
        "params": {
          "_USDC": "USDC token address",
          "_USDT": "USDT token address",
          "_fee": "the transaction fee",
          "_protocolManager": "the address of the Protocol Manager"
        }
      },
      "setNewFeeManager(address)": {
        "params": {
          "_newManager": "the new manager"
        }
      },
      "setNewTransactionFee(uint8)": {
        "params": {
          "_newTransactionFee": "the new fee"
        }
      },
      "withdrawFees(address)": {
        "details": "It fails if there is no balance in the token",
        "params": {
          "tokenToWithdraw": "The token itself"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "collectFee(uint256,address)": {
        "notice": "Called when a stream or instant payment is created"
      },
      "setNewFeeManager(address)": {
        "notice": "a function to set new managers to control the fees"
      },
      "setNewTransactionFee(uint8)": {
        "notice": "a function to set new transaction fees"
      },
      "withdrawFees(address)": {
        "notice": "A method to withdraw balance from only one token"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1375,
        "contract": "contracts/utils/FeeManager.sol:FeeManager",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2826,
        "contract": "contracts/utils/FeeManager.sol:FeeManager",
        "label": "s_protocolManager",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2828,
        "contract": "contracts/utils/FeeManager.sol:FeeManager",
        "label": "s_feeManager",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2830,
        "contract": "contracts/utils/FeeManager.sol:FeeManager",
        "label": "s_transactionFee",
        "offset": 20,
        "slot": "2",
        "type": "t_uint8"
      },
      {
        "astId": 2838,
        "contract": "contracts/utils/FeeManager.sol:FeeManager",
        "label": "s_protocolBalanceByToken",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}