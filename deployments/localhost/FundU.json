{
  "address": "0x0373771b0a8A53dEA04b8A7F33763fc73663440A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_protocolManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_USDC",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_USDT",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "currentAllowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requestedDecrease",
          "type": "uint256"
        }
      ],
      "name": "SafeERC20FailedDecreaseAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "streamID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ownerRemainingBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "beneficiaryRemainingBalance",
          "type": "uint256"
        }
      ],
      "name": "CancelStream",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "streamID",
          "type": "uint256"
        }
      ],
      "name": "Completed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "streamID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stopTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum FundUtils.StreamStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "NewStream",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "streamID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "PauseStream",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "streamID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paid",
          "type": "bool"
        }
      ],
      "name": "ResumeStream",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "WalletDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "WalletWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "streamID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "toDeposit",
          "type": "uint256"
        }
      ],
      "name": "amountNeeded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOfStreamBeneficiary",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOfStreamOwner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "cancelStream",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "depositOnWallet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeManager",
      "outputs": [
        {
          "internalType": "contract IFeeManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "getBeneficiaryStreamCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getOwnerStreamCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "getStreamByBeneficiary",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getStreamById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "deposit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceLeft",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stopTime",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "enum FundUtils.StreamStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct FundUtils.StreamData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getStreamByOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStreamsNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUsdcAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUsdtAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getWalletBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_USDC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_USDT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountToDeposit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "instantPayments",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "beneficiaries",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountToDeposit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "multipleInstantPayments",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "beneficiaries",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountToDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stop",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "multipleNewStream",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountToDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stop",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "newStream",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "paid",
          "type": "bool"
        }
      ],
      "name": "resumeStream",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_userBalanceByToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newManager",
          "type": "address"
        }
      ],
      "name": "setNewFeeManagerAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "timePassed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "withdrawFromWallet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc127b8c2d631ac352de6aad33894def11140bff777ce0ba6fededb78a643fbaa",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x0373771b0a8A53dEA04b8A7F33763fc73663440A",
    "transactionIndex": 0,
    "gasUsed": "2760676",
    "logsBloom": "0x
    "blockHash": "0x055db5a56dd28d2b9985584f579936caedc1db4bbba1c54ef660367762da14fe",
    "transactionHash": "0xc127b8c2d631ac352de6aad33894def11140bff777ce0ba6fededb78a643fbaa",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 53794143,
        "transactionHash": "0xc127b8c2d631ac352de6aad33894def11140bff777ce0ba6fededb78a643fbaa",
        "address": "0xc96D9C5DAcBcACc47728E2494C0F83eA03a36507",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000373771b0a8a53dea04b8a7f33763fc73663440a",
          "0x000000000000000000000000848c0ff71731ce5568e7ae9c4a8cfe0ae12642dc"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0x055db5a56dd28d2b9985584f579936caedc1db4bbba1c54ef660367762da14fe"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 53794143,
        "transactionHash": "0xc127b8c2d631ac352de6aad33894def11140bff777ce0ba6fededb78a643fbaa",
        "address": "0xf33C53c7e37115220dCFA19ABFddAD19f06643ff",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000373771b0a8a53dea04b8a7f33763fc73663440a",
          "0x000000000000000000000000848c0ff71731ce5568e7ae9c4a8cfe0ae12642dc"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0x055db5a56dd28d2b9985584f579936caedc1db4bbba1c54ef660367762da14fe"
      }
    ],
    "blockNumber": 53794143,
    "cumulativeGasUsed": "2760676",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x848c0fF71731CE5568e7ae9C4A8cfE0aE12642dc",
    "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
    "0xc96D9C5DAcBcACc47728E2494C0F83eA03a36507",
    "0xf33C53c7e37115220dCFA19ABFddAD19f06643ff"
  ],
  "numDeployments": 1,
  "solcInputHash": "19f9bdc3b47ef20c1cafb3c32355c921",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedDecrease\",\"type\":\"uint256\"}],\"name\":\"SafeERC20FailedDecreaseAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ownerRemainingBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beneficiaryRemainingBalance\",\"type\":\"uint256\"}],\"name\":\"CancelStream\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamID\",\"type\":\"uint256\"}],\"name\":\"Completed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stopTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum FundUtils.StreamStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"NewStream\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"PauseStream\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"}],\"name\":\"ResumeStream\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"WalletDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"WalletWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toDeposit\",\"type\":\"uint256\"}],\"name\":\"amountNeeded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOfStreamBeneficiary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOfStreamOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"cancelStream\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"depositOnWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeManager\",\"outputs\":[{\"internalType\":\"contract IFeeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getBeneficiaryStreamCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getOwnerStreamCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getStreamByBeneficiary\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getStreamById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"enum FundUtils.StreamStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct FundUtils.StreamData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getStreamByOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStreamsNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsdcAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getWalletBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToDeposit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"instantPayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"beneficiaries\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountToDeposit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"multipleInstantPayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"beneficiaries\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountToDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stop\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"multipleNewStream\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stop\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"newStream\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"}],\"name\":\"resumeStream\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_userBalanceByToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"setNewFeeManagerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"timePassed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawFromWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failed `decreaseAllowance` request.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"balanceOfStreamBeneficiary(uint256)\":{\"returns\":{\"balance\":\"of beneficiary\"}},\"balanceOfStreamOwner(uint256)\":{\"params\":{\"id\":\"Stream\\u00b4s id\"},\"returns\":{\"balance\":\"of owner\"}},\"cancelStream(uint256)\":{\"details\":\"If the beneficiary has some unclaimed balance, it will be transfer to him The rest of the balance on the stream will be transfer to the ownerIt fails if the stream doesn\\u00b4t existIt fails if the caller is not the ownerIt fails if the transfer fails\",\"params\":{\"id\":\"Stream\\u00b4s id\"}},\"depositOnWallet(uint256,address)\":{\"details\":\"It fails if the token is not USDC or USDTIt fails if the deposit is \\\"0\\\"\",\"params\":{\"deposit\":\"The amount to fund the wallet\",\"tokenAddress\":\"The token to fund\"}},\"getBeneficiaryStreamCount(address)\":{\"returns\":{\"_0\":\"StreamData object\"}},\"getOwnerStreamCount(address)\":{\"returns\":{\"_0\":\"StreamData object\"}},\"getStreamByBeneficiary(address)\":{\"returns\":{\"_0\":\"StreamData object\"}},\"getStreamById(uint256)\":{\"returns\":{\"_0\":\"StreamData object\"}},\"getStreamByOwner(address)\":{\"returns\":{\"_0\":\"StreamData object\"}},\"getWalletBalance(address)\":{\"params\":{\"token\":\"The token to know user\\u00b4s balance\"}},\"instantPayments(address,uint256,address)\":{\"params\":{\"amountToDeposit\":\"How much to deposit\",\"beneficiary\":\"The one to receive the payment\",\"tokenAddress\":\"Tokens address deposited\"}},\"multipleInstantPayments(address[],uint256,address)\":{\"params\":{\"amountToDeposit\":\"How much to deposit\",\"beneficiaries\":\"Array of the ones to receive the payments\",\"tokenAddress\":\"Tokens address deposited\"}},\"multipleNewStream(address[],uint256,uint256,uint256,address)\":{\"params\":{\"amountToDeposit\":\"How much to deposit\",\"beneficiaries\":\"The one to receive the stream\",\"start\":\"When the stream starts\",\"stop\":\"When the stream ends\",\"tokenAddress\":\"Tokens address deposited\"}},\"newStream(address,uint256,uint256,uint256,address)\":{\"params\":{\"amountToDeposit\":\"How much to deposit\",\"beneficiary\":\"The one to receive the stream\",\"start\":\"When the stream starts\",\"stop\":\"When the stream ends\",\"tokenAddress\":\"Tokens address deposited\"}},\"pause(uint256)\":{\"details\":\"It fails if the caller is not the ownerIt fails if the stream is not active\",\"params\":{\"id\":\"Stream\\u00b4s id\"}},\"resumeStream(uint256,bool)\":{\"details\":\"It fails if the caller is not the ownerIt fails if the stream is not active\",\"params\":{\"id\":\"Stream\\u00b4s id\",\"paid\":\"True if it is a paid pause, false if not\"}},\"timePassed(uint256)\":{\"returns\":{\"time\":\"passed\"}},\"withdraw(uint256)\":{\"details\":\"It fails if the stream doesn\\u00b4t existIt fails if the caller is not the beneficiaryIt fails if the amount is bigger than the balance leftIt fails if the transfer fails\",\"params\":{\"id\":\"Stream\\u00b4s id\"}},\"withdrawAll()\":{\"details\":\"It fails if the stream doesn\\u00b4t existIt fails if the caller is not the beneficiaryIt fails if the amount is bigger than the balance leftIt fails if the transfer fails\"},\"withdrawFromWallet(uint256,address)\":{\"details\":\"It fails if the token is not USDC or USDTIt fails if the amount is \\\"0\\\"It fails if the user does not have enough balance\",\"params\":{\"amount\":\"The amount to withdraw from wallet\",\"tokenAddress\":\"The token to withdrw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOfStreamBeneficiary(uint256)\":{\"notice\":\"Calculate the unclaimed balance of a stream\\u00b4s beneficiary by giving the id\"},\"balanceOfStreamOwner(uint256)\":{\"notice\":\"Calculate the balance of the stream\\u00b4s owner by giving the id\"},\"cancelStream(uint256)\":{\"notice\":\"Cancel an existing stream\"},\"depositOnWallet(uint256,address)\":{\"notice\":\"A method to fund the wallet\"},\"getBeneficiaryStreamCount(address)\":{\"notice\":\"Get a beneficiary\\u00b4s total Streams\"},\"getOwnerStreamCount(address)\":{\"notice\":\"Get a owner\\u00b4s total Streams\"},\"getStreamByBeneficiary(address)\":{\"notice\":\"Get all beneficiary streams\"},\"getStreamById(uint256)\":{\"notice\":\"Get the Stream by giving the id\"},\"getStreamByOwner(address)\":{\"notice\":\"Get all owner streams\"},\"getStreamsNumber()\":{\"notice\":\"Get the total number of streams\"},\"getWalletBalance(address)\":{\"notice\":\"A method to know user\\u00b4s balances\"},\"instantPayments(address,uint256,address)\":{\"notice\":\"Unique and instant payments\"},\"multipleInstantPayments(address[],uint256,address)\":{\"notice\":\"Multiple instant payments\"},\"multipleNewStream(address[],uint256,uint256,uint256,address)\":{\"notice\":\"Create multiple new streams\"},\"newStream(address,uint256,uint256,uint256,address)\":{\"notice\":\"Create new streams\"},\"pause(uint256)\":{\"notice\":\"Pause an active stream\"},\"resumeStream(uint256,bool)\":{\"notice\":\"Resume a paused stream\"},\"timePassed(uint256)\":{\"notice\":\"Calculates the stram\\u00b4s time passed by giving the id\"},\"withdraw(uint256)\":{\"notice\":\"Allow the beneficiary to withdraw the proceeds\"},\"withdrawAll()\":{\"notice\":\"Allow the beneficiary to withdraw the proceeds\"},\"withdrawFromWallet(uint256,address)\":{\"notice\":\"A method to withdraw from wallet\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundU.sol\":\"FundU\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/FundU.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/// @author Maikel Ordaz\\r\\n/// @title FundU\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport {UserWallet} from \\\"./wallet/UserWallet.sol\\\";\\r\\n\\r\\ncontract FundU is UserWallet {\\r\\n    uint256 private s_streamId;\\r\\n\\r\\n    // Streams\\r\\n    mapping(uint256 => StreamData) private s_streamById; // Fund Id => Fund\\r\\n    mapping(address => uint256[]) private s_beneficiaryStreamsIds; // address => [fund\\u00b4s ids]\\r\\n    mapping(address => uint256[]) private s_ownerStreamsIds; // address => [fund\\u00b4s ids]\\r\\n\\r\\n    /**\\r\\n     * @notice To check the stream\\u00b4s owner by giving the id\\r\\n     */\\r\\n    modifier onlyStreamOwner(uint256 id) {\\r\\n        StreamData memory stream = s_streamById[id];\\r\\n        require(msg.sender == stream.owner, \\\"Stream: Only stream owner allowed\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice To check the stream\\u00b4s beneficiary by giving the id\\r\\n     */\\r\\n    modifier onlyStreamBeneficiary(uint256 id) {\\r\\n        StreamData memory stream = s_streamById[id];\\r\\n        require(msg.sender == stream.beneficiary, \\\"Stream: Only stream beneficiary allowed\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _feeManager,\\r\\n        address _protocolManager,\\r\\n        address _USDC,\\r\\n        address _USDT\\r\\n    ) UserWallet(_USDC, _USDT, _protocolManager, _feeManager) {\\r\\n        s_streamId = 0;\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        revert();\\r\\n    }\\r\\n\\r\\n    /*** MAIN FUNCTIONS ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Create new streams\\r\\n     * @param _beneficiary The one to receive the stream\\r\\n     * @param _amountToDeposit How much to deposit\\r\\n     * @param _start When the stream starts\\r\\n     * @param _stop When the stream ends\\r\\n     * @param _tokenAddress Tokens address deposited\\r\\n     * @return The newly created stream\\u00b4s id\\r\\n     * @dev If start and stop are iqual it is an instant payment\\r\\n     * @dev It fails if the beneficiary is the address zero\\r\\n     * @dev It fails if the beneficiary is this contract\\r\\n     * @dev It fails if the beneficiary is the owner\\r\\n     * @dev It fails if there is no deposit\\r\\n     * @dev It fails if the stopTime is less that the time when the function is called\\r\\n     * @dev It fails if the transfer fails\\r\\n     */\\r\\n    function _newStream(\\r\\n        address _beneficiary,\\r\\n        uint256 _amountToDeposit,\\r\\n        uint256 _start,\\r\\n        uint256 _stop,\\r\\n        address _tokenAddress\\r\\n    ) internal nonReentrant returns (uint256) {\\r\\n        require(\\r\\n            _beneficiary != address(0x00) &&\\r\\n                _beneficiary != address(this) &&\\r\\n                _beneficiary != msg.sender,\\r\\n            \\\"Stream: Invalid beneficiary address\\\"\\r\\n        );\\r\\n        require(_amountToDeposit != 0, \\\"Stream: Zero amount\\\");\\r\\n\\r\\n        uint256 _depositPlusFees;\\r\\n\\r\\n        _depositPlusFees = feeManager.mustHaveBalance(_amountToDeposit);\\r\\n        require(\\r\\n            s_userBalanceByToken[msg.sender][_tokenAddress] >= _depositPlusFees,\\r\\n            \\\"Stream: Not enough balance\\\"\\r\\n        );\\r\\n        feeManager.collectFee(_amountToDeposit, _tokenAddress);\\r\\n\\r\\n        uint256 _time = block.timestamp;\\r\\n        uint256 _startTime;\\r\\n\\r\\n        // If start is zero or less than the actual time the start time will be set to block.timestamp\\r\\n        if (_start == 0 || _start < _time) {\\r\\n            _startTime = _time;\\r\\n        } else {\\r\\n            _startTime = _start;\\r\\n        }\\r\\n\\r\\n        s_streamId++;\\r\\n\\r\\n        StreamData storage stream = s_streamById[s_streamId];\\r\\n\\r\\n        require(_stop >= _startTime, \\\"Stream: Invalid stop time\\\");\\r\\n\\r\\n        if (_stop == _startTime) {\\r\\n            // This will manage it like an instant payment\\r\\n            stream.deposit = _amountToDeposit;\\r\\n            stream.balanceLeft = 0;\\r\\n            stream.startTime = _time;\\r\\n            stream.stopTime = _time;\\r\\n            stream.beneficiary = _beneficiary;\\r\\n            stream.owner = msg.sender;\\r\\n            stream.tokenAddress = _tokenAddress;\\r\\n            stream.status = StreamStatus.Completed;\\r\\n\\r\\n            // Transfer the balance directly to the beneficiary protocol\\u00b4s wallet\\r\\n            s_userBalanceByToken[_beneficiary][_tokenAddress] += _amountToDeposit;\\r\\n        } else {\\r\\n            // This will manage it like a stream\\r\\n            uint256 _duration = _stop - _startTime;\\r\\n\\r\\n            // This check is to ensure a rate per second, bigger than 0\\r\\n            require(_amountToDeposit > _duration, \\\"Stream: Deposit smaller than time left\\\");\\r\\n\\r\\n            stream.deposit = _amountToDeposit;\\r\\n            stream.balanceLeft = _amountToDeposit;\\r\\n            stream.startTime = _startTime;\\r\\n            stream.stopTime = _stop;\\r\\n            stream.beneficiary = _beneficiary;\\r\\n            stream.owner = msg.sender;\\r\\n            stream.tokenAddress = _tokenAddress;\\r\\n            stream.status = StreamStatus.Active;\\r\\n        }\\r\\n\\r\\n        // The owner balance will be locked on streams and take away on instant payments\\r\\n\\r\\n        s_userBalanceByToken[msg.sender][_tokenAddress] -= _depositPlusFees;\\r\\n\\r\\n        s_beneficiaryStreamsIds[_beneficiary].push(s_streamId);\\r\\n        s_ownerStreamsIds[msg.sender].push(s_streamId);\\r\\n\\r\\n        StreamStatus status = stream.status;\\r\\n\\r\\n        emit NewStream(\\r\\n            s_streamId,\\r\\n            msg.sender,\\r\\n            _beneficiary,\\r\\n            _amountToDeposit,\\r\\n            _tokenAddress,\\r\\n            _startTime,\\r\\n            _stop,\\r\\n            status\\r\\n        );\\r\\n\\r\\n        return s_streamId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice An internal function to manage withdraws on the Pause and Resume functions\\r\\n     * @param _id The stream\\u00b4s id\\r\\n     * @param _who The one who receive the transfer\\r\\n     * @dev _who can be the stream\\u00b4s beneficiary or the stream\\u00b4s owner\\r\\n     */\\r\\n    function _withdrawPauseAndResume(uint256 _id, address _who) private {\\r\\n        StreamData storage stream = s_streamById[_id];\\r\\n\\r\\n        uint256 _balance = 0;\\r\\n        uint256 _time = block.timestamp;\\r\\n\\r\\n        if (stream.stopTime <= _time) {\\r\\n            _balance = stream.balanceLeft;\\r\\n            stream.balanceLeft = 0;\\r\\n            stream.status = StreamStatus.Completed;\\r\\n\\r\\n            emit Completed(_id);\\r\\n        } else {\\r\\n            _balance = balanceOfStreamBeneficiary(_id);\\r\\n            stream.balanceLeft = stream.balanceLeft - _balance;\\r\\n        }\\r\\n\\r\\n        if (_balance > 0) {\\r\\n            s_userBalanceByToken[_who][stream.tokenAddress] += _balance;\\r\\n\\r\\n            emit Withdraw(_id, stream.owner, stream.beneficiary, _who, _balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*** INSTANT PAYMENTS RELATED ***/\\r\\n    /**\\r\\n     * @notice Unique and instant payments\\r\\n     * @param beneficiary The one to receive the payment\\r\\n     * @param amountToDeposit How much to deposit\\r\\n     * @param tokenAddress Tokens address deposited\\r\\n     */\\r\\n    function instantPayments(\\r\\n        address beneficiary,\\r\\n        uint256 amountToDeposit,\\r\\n        address tokenAddress\\r\\n    ) external {\\r\\n        uint256 time = block.timestamp;\\r\\n        _newStream(beneficiary, amountToDeposit, time, time, tokenAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiple instant payments\\r\\n     * @param beneficiaries Array of the ones to receive the payments\\r\\n     * @param amountToDeposit How much to deposit\\r\\n     * @param tokenAddress Tokens address deposited\\r\\n     */\\r\\n    function multipleInstantPayments(\\r\\n        address[] memory beneficiaries,\\r\\n        uint256 amountToDeposit,\\r\\n        address tokenAddress\\r\\n    ) external {\\r\\n        uint256 time = block.timestamp;\\r\\n        for (uint i = 0; i < beneficiaries.length; i++) {\\r\\n            address beneficiary = beneficiaries[i];\\r\\n            _newStream(beneficiary, amountToDeposit, time, time, tokenAddress);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*** STREAMS RELATED ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Create new streams\\r\\n     * @param beneficiary The one to receive the stream\\r\\n     * @param amountToDeposit How much to deposit\\r\\n     * @param start When the stream starts\\r\\n     * @param stop When the stream ends\\r\\n     * @param tokenAddress Tokens address deposited\\r\\n     */\\r\\n    function newStream(\\r\\n        address beneficiary,\\r\\n        uint256 amountToDeposit,\\r\\n        uint256 start,\\r\\n        uint256 stop,\\r\\n        address tokenAddress\\r\\n    ) external {\\r\\n        _newStream(beneficiary, amountToDeposit, start, stop, tokenAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Create multiple new streams\\r\\n     * @param beneficiaries The one to receive the stream\\r\\n     * @param amountToDeposit How much to deposit\\r\\n     * @param start When the stream starts\\r\\n     * @param stop When the stream ends\\r\\n     * @param tokenAddress Tokens address deposited\\r\\n     */\\r\\n    function multipleNewStream(\\r\\n        address[] memory beneficiaries,\\r\\n        uint256 amountToDeposit,\\r\\n        uint256 start,\\r\\n        uint256 stop,\\r\\n        address tokenAddress\\r\\n    ) external {\\r\\n        for (uint i = 0; i < beneficiaries.length; i++) {\\r\\n            address beneficiary = beneficiaries[i];\\r\\n            _newStream(beneficiary, amountToDeposit, start, stop, tokenAddress);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Pause an active stream\\r\\n     * @param id Stream\\u00b4s id\\r\\n     * @dev It fails if the caller is not the owner\\r\\n     * @dev It fails if the stream is not active\\r\\n     */\\r\\n    function pause(uint256 id) external onlyStreamOwner(id) {\\r\\n        StreamData storage stream = s_streamById[id];\\r\\n\\r\\n        require(stream.status == StreamStatus.Active, \\\"Stream: Stream incorrect status\\\");\\r\\n\\r\\n        stream.status = StreamStatus.Paused;\\r\\n\\r\\n        _withdrawPauseAndResume(id, stream.beneficiary);\\r\\n\\r\\n        emit PauseStream(id, stream.owner, stream.beneficiary);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Resume a paused stream\\r\\n     * @param id Stream\\u00b4s id\\r\\n     * @param paid True if it is a paid pause, false if not\\r\\n     * @dev It fails if the caller is not the owner\\r\\n     * @dev It fails if the stream is not active\\r\\n     */\\r\\n    function resumeStream(uint256 id, bool paid) public onlyStreamOwner(id) {\\r\\n        StreamData storage stream = s_streamById[id];\\r\\n\\r\\n        require(stream.status == StreamStatus.Paused, \\\"Stream: Stream incorrect status\\\");\\r\\n\\r\\n        if (!paid) {\\r\\n            _withdrawPauseAndResume(id, stream.owner);\\r\\n        }\\r\\n\\r\\n        if (stream.status != StreamStatus.Completed) {\\r\\n            stream.status = StreamStatus.Active;\\r\\n\\r\\n            emit ResumeStream(id, stream.owner, stream.beneficiary, paid);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Cancel an existing stream\\r\\n     * @param id Stream\\u00b4s id\\r\\n     * @dev If the beneficiary has some unclaimed balance, it will be transfer to him\\r\\n     * The rest of the balance on the stream will be transfer to the owner\\r\\n     * @dev It fails if the stream doesn\\u00b4t exist\\r\\n     * @dev It fails if the caller is not the owner\\r\\n     * @dev It fails if the transfer fails\\r\\n     */\\r\\n    function cancelStream(uint256 id) external nonReentrant onlyStreamOwner(id) {\\r\\n        StreamData storage stream = s_streamById[id];\\r\\n\\r\\n        require(\\r\\n            stream.status == StreamStatus.Active || stream.status == StreamStatus.Paused,\\r\\n            \\\"Stream: Stream incorrect status\\\"\\r\\n        );\\r\\n\\r\\n        if (stream.status == StreamStatus.Paused) {\\r\\n            resumeStream(id, false);\\r\\n        }\\r\\n\\r\\n        // Check the balances\\r\\n        uint256 ownerRemainingBalance = balanceOfStreamOwner(id);\\r\\n        uint256 beneficiaryRemainingBalance = balanceOfStreamBeneficiary(id);\\r\\n\\r\\n        stream.status = StreamStatus.Canceled;\\r\\n        stream.balanceLeft = 0;\\r\\n\\r\\n        if (beneficiaryRemainingBalance > 0) {\\r\\n            s_userBalanceByToken[stream.beneficiary][\\r\\n                stream.tokenAddress\\r\\n            ] += beneficiaryRemainingBalance;\\r\\n        }\\r\\n        if (ownerRemainingBalance > 0) {\\r\\n            s_userBalanceByToken[stream.owner][stream.tokenAddress] += ownerRemainingBalance;\\r\\n        }\\r\\n\\r\\n        emit CancelStream(\\r\\n            id,\\r\\n            stream.owner,\\r\\n            stream.beneficiary,\\r\\n            ownerRemainingBalance,\\r\\n            beneficiaryRemainingBalance\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allow the beneficiary to withdraw the proceeds\\r\\n     * @dev It fails if the stream doesn\\u00b4t exist\\r\\n     * @dev It fails if the caller is not the beneficiary\\r\\n     * @dev It fails if the amount is bigger than the balance left\\r\\n     * @dev It fails if the transfer fails\\r\\n     */\\r\\n    function withdrawAll() external nonReentrant {\\r\\n        uint256[] memory beneficiaryIds = s_beneficiaryStreamsIds[msg.sender];\\r\\n        for (uint i = 0; i < beneficiaryIds.length; i++) {\\r\\n            uint256 id = beneficiaryIds[i];\\r\\n            StreamData memory stream = s_streamById[id];\\r\\n\\r\\n            if (stream.status == StreamStatus.Active) {\\r\\n                _withdrawPauseAndResume(id, stream.beneficiary);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allow the beneficiary to withdraw the proceeds\\r\\n     * @param id Stream\\u00b4s id\\r\\n     * @dev It fails if the stream doesn\\u00b4t exist\\r\\n     * @dev It fails if the caller is not the beneficiary\\r\\n     * @dev It fails if the amount is bigger than the balance left\\r\\n     * @dev It fails if the transfer fails\\r\\n     */\\r\\n    function withdraw(uint256 id) public nonReentrant onlyStreamBeneficiary(id) {\\r\\n        StreamData storage stream = s_streamById[id];\\r\\n\\r\\n        require(stream.status == StreamStatus.Active, \\\"Stream: Stream incorrect status\\\");\\r\\n\\r\\n        uint256 balance = 0;\\r\\n\\r\\n        uint256 time = block.timestamp;\\r\\n\\r\\n        if (stream.stopTime <= time) {\\r\\n            balance = stream.balanceLeft;\\r\\n            stream.balanceLeft = 0;\\r\\n            stream.status = StreamStatus.Completed;\\r\\n\\r\\n            emit Completed(id);\\r\\n        } else {\\r\\n            balance = balanceOfStreamBeneficiary(id);\\r\\n\\r\\n            require(balance > 0, \\\"Stream: No balance available\\\");\\r\\n\\r\\n            stream.balanceLeft = stream.balanceLeft - balance;\\r\\n        }\\r\\n\\r\\n        s_userBalanceByToken[stream.beneficiary][stream.tokenAddress] += balance;\\r\\n\\r\\n        emit Withdraw(id, stream.owner, stream.beneficiary, stream.beneficiary, balance);\\r\\n    }\\r\\n\\r\\n    /*** VIEW / PURE FUNCTIONS ***/\\r\\n\\r\\n    /*** STREAM\\u00b4S INFO ***/\\r\\n    /**\\r\\n     * @notice Get the total number of streams\\r\\n     */\\r\\n    function getStreamsNumber() public view returns (uint256) {\\r\\n        return s_streamId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the Stream by giving the id\\r\\n     * @return StreamData object\\r\\n     */\\r\\n    function getStreamById(uint256 id) public view returns (StreamData memory) {\\r\\n        return s_streamById[id];\\r\\n    }\\r\\n\\r\\n    /*** STREAM BENEFICIARY\\u00b4S INFO ***/\\r\\n    /**\\r\\n     * @notice Get all beneficiary streams\\r\\n     * @return StreamData object\\r\\n     */\\r\\n    function getStreamByBeneficiary(address beneficiary) public view returns (uint256[] memory) {\\r\\n        return s_beneficiaryStreamsIds[beneficiary];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get a beneficiary\\u00b4s total Streams\\r\\n     * @return StreamData object\\r\\n     */\\r\\n    function getBeneficiaryStreamCount(address beneficiary) public view returns (uint256) {\\r\\n        return s_beneficiaryStreamsIds[beneficiary].length;\\r\\n    }\\r\\n\\r\\n    /*** STREAM OWNER\\u00b4S INFO ***/\\r\\n    /**\\r\\n     * @notice Get all owner streams\\r\\n     * @return StreamData object\\r\\n     */\\r\\n    function getStreamByOwner(address owner) public view returns (uint256[] memory) {\\r\\n        return s_ownerStreamsIds[owner];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get a owner\\u00b4s total Streams\\r\\n     * @return StreamData object\\r\\n     */\\r\\n    function getOwnerStreamCount(address owner) public view returns (uint256) {\\r\\n        return s_ownerStreamsIds[owner].length;\\r\\n    }\\r\\n\\r\\n    /*** AUXILIARS ***/\\r\\n\\r\\n    function amountNeeded(uint256 toDeposit) public view returns (uint256) {\\r\\n        uint256 needed;\\r\\n\\r\\n        uint inputFromUser = toDeposit * 10 ** 6;\\r\\n        needed = (feeManager.mustHaveBalance(inputFromUser));\\r\\n\\r\\n        return needed;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate the unclaimed balance of a stream\\u00b4s beneficiary by giving the id\\r\\n     * @return balance of beneficiary\\r\\n     */\\r\\n    function balanceOfStreamBeneficiary(uint256 id) public view returns (uint256 balance) {\\r\\n        StreamData memory stream = s_streamById[id];\\r\\n\\r\\n        uint256 time = timePassed(id);\\r\\n        uint256 duration = stream.stopTime - stream.startTime;\\r\\n        uint256 rate = stream.deposit / duration;\\r\\n        uint256 beneficiaryBalance = time * rate;\\r\\n\\r\\n        // If the deposit is bigger than balanceLeft there has been some withdraws\\r\\n        if (stream.deposit > stream.balanceLeft) {\\r\\n            // So check how much the beneficiary has withdraw and calculate the actual balance\\r\\n            uint256 withdraws = stream.deposit - stream.balanceLeft;\\r\\n            beneficiaryBalance = beneficiaryBalance - withdraws;\\r\\n        }\\r\\n\\r\\n        return beneficiaryBalance;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate the balance of the stream\\u00b4s owner by giving the id\\r\\n     * @param id Stream\\u00b4s id\\r\\n     * @return balance of owner\\r\\n     */\\r\\n    function balanceOfStreamOwner(uint256 id) public view returns (uint256 balance) {\\r\\n        StreamData memory stream = s_streamById[id];\\r\\n        uint256 beneficiaryBalance = balanceOfStreamBeneficiary(id);\\r\\n\\r\\n        uint256 ownerBalance = stream.balanceLeft - beneficiaryBalance;\\r\\n        return ownerBalance;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the stram\\u00b4s time passed by giving the id\\r\\n     * @return time passed\\r\\n     */\\r\\n    function timePassed(uint256 id) public view returns (uint256 time) {\\r\\n        StreamData memory stream = s_streamById[id];\\r\\n        uint256 currentTime = block.timestamp;\\r\\n        if (currentTime <= stream.startTime) return 0;\\r\\n        if (currentTime < stream.stopTime) return currentTime - stream.startTime;\\r\\n        return stream.stopTime - stream.startTime;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x63d3ef44baf88ef41a07aa0fb83a57cf24f5ca32865828614e56253adf8dcb10\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\ninterface IFeeManager {\\r\\n    event FeeCollected(uint256 feeCollected, address indexed token);\\r\\n\\r\\n    function collectFee(uint256 depositAmount, address tokenAddress) external;\\r\\n\\r\\n    function withdrawFees(address tokenToWithdraw) external;\\r\\n\\r\\n    function setNewFeeManager(address _newManager) external;\\r\\n\\r\\n    function setNewTransactionFee(uint256 _newTransactionFee) external;\\r\\n\\r\\n    function mustHaveBalance(uint256 deposit) external view returns (uint256);\\r\\n\\r\\n    function getProtocolManager() external view returns (address);\\r\\n\\r\\n    function getFeeManager() external view returns (address);\\r\\n\\r\\n    function getTransactionFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x9a3fa5418fcd0944f3fc4408c0230b5d58e97794bb54358e5b62966f8d415016\",\"license\":\"MIT\"},\"contracts/utils/FundUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\ncontract FundUtils {\\r\\n    enum StreamStatus {\\r\\n        Active,\\r\\n        Paused,\\r\\n        Canceled,\\r\\n        Completed\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * It refer to an instant payment when:\\r\\n     * startTime === stopTime\\r\\n     * balanceLeft === 0\\r\\n     * StreamStatus === Completed\\r\\n     */\\r\\n    struct StreamData {\\r\\n        uint256 deposit;\\r\\n        uint256 balanceLeft; // If no withdraws must be equal to deposit\\r\\n        uint256 startTime;\\r\\n        uint256 stopTime;\\r\\n        address beneficiary;\\r\\n        address owner;\\r\\n        address tokenAddress;\\r\\n        StreamStatus status;\\r\\n    }\\r\\n\\r\\n    event WalletDeposit(uint256 deposit, address indexed token, address indexed user);\\r\\n\\r\\n    event WalletWithdraw(uint256 amount, address indexed token, address indexed user);\\r\\n\\r\\n    event NewStream(\\r\\n        uint256 indexed streamID,\\r\\n        address indexed owner,\\r\\n        address indexed beneficiary,\\r\\n        uint256 depositedAmount,\\r\\n        address token,\\r\\n        uint256 startTime,\\r\\n        uint256 stopTime,\\r\\n        StreamStatus status\\r\\n    );\\r\\n\\r\\n    event PauseStream(uint256 indexed streamID, address indexed owner, address indexed beneficiary);\\r\\n\\r\\n    event ResumeStream(\\r\\n        uint256 indexed streamID,\\r\\n        address indexed owner,\\r\\n        address indexed beneficiary,\\r\\n        bool paid\\r\\n    );\\r\\n\\r\\n    event CancelStream(\\r\\n        uint256 indexed streamID,\\r\\n        address indexed owner,\\r\\n        address indexed beneficiary,\\r\\n        uint256 ownerRemainingBalance,\\r\\n        uint256 beneficiaryRemainingBalance\\r\\n    );\\r\\n\\r\\n    event Withdraw(\\r\\n        uint256 indexed streamID,\\r\\n        address indexed owner,\\r\\n        address indexed beneficiary,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    event Completed(uint256 indexed streamID);\\r\\n}\\r\\n\",\"keccak256\":\"0x1a5df5881a7cee0061d4c57113972430fbee15db223cd923dc2fc5b886dc42ed\",\"license\":\"MIT\"},\"contracts/wallet/UserWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport {FundUtils} from \\\"../utils/FundUtils.sol\\\";\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {IFeeManager} from \\\"../interfaces/IFeeManager.sol\\\";\\r\\n\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\ncontract UserWallet is ReentrancyGuard, FundUtils {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    address private s_protocolManager;\\r\\n\\r\\n    // Tokens allowed on protocol\\r\\n    address public immutable i_USDC;\\r\\n    address public immutable i_USDT;\\r\\n    IERC20 private immutable USDC;\\r\\n    IERC20 private immutable USDT;\\r\\n\\r\\n    // Fee manager\\r\\n    address private s_feeManager;\\r\\n    IFeeManager public feeManager;\\r\\n\\r\\n    // Funding wallet\\r\\n    // user => (tokenAddress => balance)\\r\\n    mapping(address => mapping(address => uint256)) public s_userBalanceByToken;\\r\\n\\r\\n    /**\\r\\n     * @notice To check the protocol Manager is the appropiate\\r\\n     */\\r\\n    modifier onlyProtocolManager() {\\r\\n        require(\\r\\n            msg.sender == s_protocolManager,\\r\\n            \\\"FeeManager: Only the protocol manager is allowed\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _USDC, address _USDT, address _protocolManager, address _feeManager) {\\r\\n        i_USDC = _USDC;\\r\\n        i_USDT = _USDT;\\r\\n\\r\\n        USDC = IERC20(i_USDC);\\r\\n        USDT = IERC20(i_USDT);\\r\\n\\r\\n        s_protocolManager = _protocolManager;\\r\\n\\r\\n        s_feeManager = _feeManager;\\r\\n        feeManager = IFeeManager(s_feeManager);\\r\\n\\r\\n        // Infinite approvals\\r\\n        USDC.safeIncreaseAllowance(address(feeManager), type(uint256).max);\\r\\n        USDT.safeIncreaseAllowance(address(feeManager), type(uint256).max);\\r\\n    }\\r\\n\\r\\n    /*** MAIN FUNCTIONS ***/\\r\\n    /*** WALLET RELATED ***/\\r\\n    /**\\r\\n     * @notice A method to fund the wallet\\r\\n     * @param deposit The amount to fund the wallet\\r\\n     * @param tokenAddress The token to fund\\r\\n     * @dev It fails if the token is not USDC or USDT\\r\\n     * @dev It fails if the deposit is \\\"0\\\"\\r\\n     */\\r\\n    function depositOnWallet(uint256 deposit, address tokenAddress) external returns (uint256) {\\r\\n        require(deposit != 0, \\\"Wallet: Zero amount\\\");\\r\\n        require(tokenAddress == i_USDC || tokenAddress == i_USDT, \\\"Wallet: Only USDC and USDT\\\");\\r\\n\\r\\n        s_userBalanceByToken[msg.sender][tokenAddress] += deposit;\\r\\n\\r\\n        IERC20 token = IERC20(tokenAddress);\\r\\n        token.safeTransferFrom(msg.sender, address(this), deposit);\\r\\n\\r\\n        emit WalletDeposit(deposit, tokenAddress, msg.sender);\\r\\n        return deposit;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice A method to withdraw from wallet\\r\\n     * @param amount The amount to withdraw from wallet\\r\\n     * @param tokenAddress The token to withdrw\\r\\n     * @dev It fails if the token is not USDC or USDT\\r\\n     * @dev It fails if the amount is \\\"0\\\"\\r\\n     * @dev It fails if the user does not have enough balance\\r\\n     */\\r\\n    function withdrawFromWallet(\\r\\n        uint amount,\\r\\n        address tokenAddress\\r\\n    ) external nonReentrant returns (uint256) {\\r\\n        require(amount != 0, \\\"Wallet: Zero amount\\\");\\r\\n        require(tokenAddress == i_USDC || tokenAddress == i_USDT, \\\"Wallet: Only  USDC and USDT\\\");\\r\\n        require(\\r\\n            s_userBalanceByToken[msg.sender][tokenAddress] >= amount,\\r\\n            \\\"Wallet: Not enough balance\\\"\\r\\n        );\\r\\n\\r\\n        s_userBalanceByToken[msg.sender][tokenAddress] -= amount;\\r\\n\\r\\n        IERC20 token = IERC20(tokenAddress);\\r\\n        token.safeTransfer(msg.sender, amount);\\r\\n\\r\\n        emit WalletWithdraw(amount, tokenAddress, msg.sender);\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    /*** FEE MANAGER RELATED ***/\\r\\n\\r\\n    function setNewFeeManagerAddress(address newManager) external onlyProtocolManager {\\r\\n        require(\\r\\n            newManager != address(0x00) && newManager != s_feeManager && newManager != msg.sender,\\r\\n            \\\"Wallet: Invalid Manager address\\\"\\r\\n        );\\r\\n\\r\\n        // Resetting to zero the actual feeManager\\r\\n        USDC.safeDecreaseAllowance(address(feeManager), 0);\\r\\n        USDT.safeDecreaseAllowance(address(feeManager), 0);\\r\\n\\r\\n        // Set the new feeManager and infinite approves to every token\\r\\n        s_feeManager = newManager;\\r\\n        feeManager = IFeeManager(s_feeManager);\\r\\n\\r\\n        USDC.safeIncreaseAllowance(address(feeManager), type(uint256).max);\\r\\n        USDT.safeIncreaseAllowance(address(feeManager), type(uint256).max);\\r\\n    }\\r\\n\\r\\n    /*** VIEW / PURE FUNCTIONS ***/\\r\\n\\r\\n    /*** USER\\u00b4S INFO ***/\\r\\n    /**\\r\\n     * @notice A method to know user\\u00b4s balances\\r\\n     * @param token The token to know user\\u00b4s balance\\r\\n     */\\r\\n    function getWalletBalance(address token) public view returns (uint256) {\\r\\n        return s_userBalanceByToken[msg.sender][token];\\r\\n    }\\r\\n\\r\\n    /*** TOKEN\\u00b4S INFO ***/\\r\\n\\r\\n    function getUsdcAddress() public view returns (address) {\\r\\n        return i_USDC;\\r\\n    }\\r\\n\\r\\n    function getUsdtAddress() public view returns (address) {\\r\\n        return i_USDT;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x99bc31f683f572dbe7b9c103dd111190d049ddac04c13c5f429f18ec83849311\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b50604051620033ff380380620033ff8339810160408190526200003591620004c2565b600160008190556001600160a01b03808416608081905281841660a081905260c082905260e05282548287166001600160a01b03199182161790935560028054928816928416831790556003805490931682179092558391839186918891620000a29190600019620000d7565b60035460e051620000c3916001600160a01b039182169116600019620000d7565b5050600060055550620005b0945050505050565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa15801562000128573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200014e91906200051f565b905062000168848462000162858562000539565b6200016e565b50505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152620001c890859083906200023416565b6200016857604080516001600160a01b038516602482015260006044808301919091528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b1790915262000228918691620002e716565b620001688482620002e7565b6000806000846001600160a01b0316846040516200025391906200055b565b6000604051808303816000865af19150503d806000811462000292576040519150601f19603f3d011682016040523d82523d6000602084013e62000297565b606091505b5091509150818015620002c5575080511580620002c5575080806020019051810190620002c591906200058c565b8015620002dc57506000856001600160a01b03163b115b925050505b92915050565b6000620002fe6001600160a01b038416836200035a565b90508051600014158015620003265750808060200190518101906200032491906200058c565b155b156200035557604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b505050565b60606200036a8383600062000371565b9392505050565b606081471015620003985760405163cd78605960e01b81523060048201526024016200034c565b600080856001600160a01b03168486604051620003b691906200055b565b60006040518083038185875af1925050503d8060008114620003f5576040519150601f19603f3d011682016040523d82523d6000602084013e620003fa565b606091505b5090925090506200040d86838362000417565b9695505050505050565b60608262000430576200042a826200047b565b6200036a565b81511580156200044857506001600160a01b0384163b155b156200047357604051639996b31560e01b81526001600160a01b03851660048201526024016200034c565b50806200036a565b8051156200048c5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b80516001600160a01b0381168114620004bd57600080fd5b919050565b60008060008060808587031215620004d957600080fd5b620004e485620004a5565b9350620004f460208601620004a5565b92506200050460408601620004a5565b91506200051460608601620004a5565b905092959194509250565b6000602082840312156200053257600080fd5b5051919050565b80820180821115620002e157634e487b7160e01b600052601160045260246000fd5b6000825160005b818110156200057e576020818601810151858301520162000562565b506000920191825250919050565b6000602082840312156200059f57600080fd5b815180151581146200036a57600080fd5b60805160a05160c05160e051612ddd62000622600039600081816109cf0152610a660152600081816109940152610a2c0152600081816103060152818161058701528181610f3001526119880152600081816103900152818161051901528181610ef5015261194d0152612ddd6000f3fe6080604052600436106101c65760003560e01c80639db60550116100f7578063d0fb020311610095578063ed8ec19411610064578063ed8ec194146105a9578063f03cc7bd146105ec578063f3a395b11461060c578063fa0f460b1461064257600080fd5b8063d0fb0203146104ea578063dbe0b5b21461050a578063dd7041ef1461053d578063ddb99ee21461057557600080fd5b8063ac458e01116100d1578063ac458e011461046a578063ad5357331461048a578063b74db3fb146104aa578063cfed9199146104ca57600080fd5b80639db60550146103f45780639ea3e3c814610414578063a47810291461044a57600080fd5b80633e59ec51116101645780636db9241b1161013e5780636db9241b1461035e578063804b40961461037e578063853828b6146103b25780638ed031cb146103c757600080fd5b80633e59ec51146102ca5780634b7dd8e6146102f7578063601351961461033e57600080fd5b80632c259fbd116101a05780632c259fbd1461024a5780632e1a7d4d1461026a57806331edc6f71461028a57806339493cdc146102aa57600080fd5b8063136439dd146101d557806316366cda146101f757806328413ead1461022a57600080fd5b366101d057600080fd5b600080fd5b3480156101e157600080fd5b506101f56101f0366004612832565b610657565b005b34801561020357600080fd5b50610217610212366004612832565b610802565b6040519081526020015b60405180910390f35b34801561023657600080fd5b506101f5610245366004612867565b610889565b34801561025657600080fd5b506101f561026536600461293a565b610a94565b34801561027657600080fd5b506101f5610285366004612832565b610ae8565b34801561029657600080fd5b506101f56102a5366004612991565b610dd6565b3480156102b657600080fd5b506101f56102c53660046129e1565b610deb565b3480156102d657600080fd5b506102ea6102e5366004612867565b610e37565b6040516102219190612a40565b34801561030357600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b039091168152602001610221565b34801561034a57600080fd5b50610217610359366004612a84565b610ea3565b34801561036a57600080fd5b506101f5610379366004612832565b6110c0565b34801561038a57600080fd5b506103267f000000000000000000000000000000000000000000000000000000000000000081565b3480156103be57600080fd5b506101f561136e565b3480156103d357600080fd5b506103e76103e2366004612832565b6114f5565b6040516102219190612ae8565b34801561040057600080fd5b5061021761040f366004612832565b6115e6565b34801561042057600080fd5b5061021761042f366004612867565b6001600160a01b031660009081526007602052604090205490565b34801561045657600080fd5b506101f5610465366004612b68565b6116b4565b34801561047657600080fd5b506101f5610485366004612b98565b61188b565b34801561049657600080fd5b506102ea6104a5366004612867565b611899565b3480156104b657600080fd5b506102176104c5366004612a84565b611903565b3480156104d657600080fd5b506102176104e5366004612832565b611a9f565b3480156104f657600080fd5b50600354610326906001600160a01b031681565b34801561051657600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610326565b34801561054957600080fd5b50610217610558366004612bcb565b600460209081526000928352604080842090915290825290205481565b34801561058157600080fd5b506103267f000000000000000000000000000000000000000000000000000000000000000081565b3480156105b557600080fd5b506102176105c4366004612867565b3360009081526004602090815260408083206001600160a01b03949094168352929052205490565b3480156105f857600080fd5b50610217610607366004612832565b611b8c565b34801561061857600080fd5b50610217610627366004612867565b6001600160a01b031660009081526008602052604090205490565b34801561064e57600080fd5b50600554610217565b600081815260066020818152604080842081516101008101835281548152600182015493810193909352600281015491830191909152600380820154606084015260048201546001600160a01b0390811660808501526005830154811660a08501529382015493841660c084015285949360e0840191600160a01b90910460ff16908111156106e8576106e8612ab0565b60038111156106f9576106f9612ab0565b8152505090508060a001516001600160a01b0316336001600160a01b03161461073d5760405162461bcd60e51b815260040161073490612bf5565b60405180910390fd5b6000838152600660205260408120906006820154600160a01b900460ff16600381111561076c5761076c612ab0565b146107895760405162461bcd60e51b815260040161073490612c36565b60068101805460ff60a01b1916600160a01b17905560048101546107b79085906001600160a01b0316611cb6565b600481015460058201546040516001600160a01b03928316929091169086907f5d9d98f2b748ac9996283b853e50f8757959dfd0141b5265270f538e172e70a090600090a450505050565b6000808061081384620f4240612c83565b600354604051630da0e59160e41b8152600481018390529192506001600160a01b03169063da0e591090602401602060405180830381865afa15801561085d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108819190612c9a565b949350505050565b6001546001600160a01b031633146108fc5760405162461bcd60e51b815260206004820152603060248201527f4665654d616e616765723a204f6e6c79207468652070726f746f636f6c206d6160448201526f1b9859d95c881a5cc8185b1b1bddd95960821b6064820152608401610734565b6001600160a01b0381161580159061092257506002546001600160a01b03828116911614155b801561093757506001600160a01b0381163314155b6109835760405162461bcd60e51b815260206004820152601f60248201527f57616c6c65743a20496e76616c6964204d616e616765722061646472657373006044820152606401610734565b6003546109be906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691166000611de1565b6003546109f9906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691166000611de1565b600280546001600160a01b03199081166001600160a01b03848116918217909355600380549092168117909155610a55917f00000000000000000000000000000000000000000000000000000000000000001690600019611ea4565b600354610a91906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169116600019611ea4565b50565b4260005b8451811015610ae1576000858281518110610ab557610ab5612cb3565b60200260200101519050610acc8186858688611f2e565b50508080610ad990612cc9565b915050610a98565b5050505050565b610af06124b1565b600081815260066020818152604080842081516101008101835281548152600182015493810193909352600281015491830191909152600380820154606084015260048201546001600160a01b0390811660808501526005830154811660a08501529382015493841660c084015285949360e0840191600160a01b90910460ff1690811115610b8157610b81612ab0565b6003811115610b9257610b92612ab0565b81525050905080608001516001600160a01b0316336001600160a01b031614610c0d5760405162461bcd60e51b815260206004820152602760248201527f53747265616d3a204f6e6c792073747265616d2062656e656669636961727920604482015266185b1b1bddd95960ca1b6064820152608401610734565b6000838152600660205260408120906006820154600160a01b900460ff166003811115610c3c57610c3c612ab0565b14610c595760405162461bcd60e51b815260040161073490612c36565b60008042905080836003015411610cbb5760018301805460009182905560068501805460ff60a01b1916600360a01b17905560405190935087917fdfd517ed69f8a0a57d49fe494e4864fac3cfe3585c14c0bfddf39f72463ec3fd91a2610d2c565b610cc486611b8c565b915060008211610d165760405162461bcd60e51b815260206004820152601c60248201527f53747265616d3a204e6f2062616c616e636520617661696c61626c65000000006044820152606401610734565b818360010154610d269190612ce2565b60018401555b6004838101546001600160a01b03908116600090815260209283526040808220600688015490931682529190925281208054849290610d6c908490612cf5565b909155505060048301546005840154604080516001600160a01b0393841680825260208201879052939092169189917f14fb18a6159cb964441ea40f176151c2d2a3db8c8152e81e410e2524288736e491015b60405180910390a45050505050610a916001600055565b610de38585858585611f2e565b505050505050565b60005b8551811015610de3576000868281518110610e0b57610e0b612cb3565b60200260200101519050610e228187878787611f2e565b50508080610e2f90612cc9565b915050610dee565b6001600160a01b038116600090815260076020908152604091829020805483518184028101840190945280845260609392830182828015610e9757602002820191906000526020600020905b815481526020019060010190808311610e83575b50505050509050919050565b6000610ead6124b1565b82600003610ef35760405162461bcd60e51b815260206004820152601360248201527215d85b1b195d0e8816995c9bc8185b5bdd5b9d606a1b6044820152606401610734565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161480610f6457507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b610fb05760405162461bcd60e51b815260206004820152601b60248201527f57616c6c65743a204f6e6c7920205553444320616e64205553445400000000006044820152606401610734565b3360009081526004602090815260408083206001600160a01b03861684529091529020548311156110235760405162461bcd60e51b815260206004820152601a60248201527f57616c6c65743a204e6f7420656e6f7567682062616c616e63650000000000006044820152606401610734565b3360009081526004602090815260408083206001600160a01b038616845290915281208054859290611056908490612ce2565b909155508290506110716001600160a01b03821633866124db565b60405184815233906001600160a01b038516907f01aaa55c201cb0eb4845059eb5158ccc9dfeb0f477d3af4a5dd6da300e77603c9060200160405180910390a350506001600055815b92915050565b6110c86124b1565b600081815260066020818152604080842081516101008101835281548152600182015493810193909352600281015491830191909152600380820154606084015260048201546001600160a01b0390811660808501526005830154811660a08501529382015493841660c084015285949360e0840191600160a01b90910460ff169081111561115957611159612ab0565b600381111561116a5761116a612ab0565b8152505090508060a001516001600160a01b0316336001600160a01b0316146111a55760405162461bcd60e51b815260040161073490612bf5565b6000838152600660205260408120906006820154600160a01b900460ff1660038111156111d4576111d4612ab0565b14806111ff575060016006820154600160a01b900460ff1660038111156111fd576111fd612ab0565b145b61121b5760405162461bcd60e51b815260040161073490612c36565b60016006820154600160a01b900460ff16600381111561123d5761123d612ab0565b0361124d5761124d8460006116b4565b6000611258856115e6565b9050600061126586611b8c565b60068401805460ff60a01b1916600160a11b17905560006001850155905080156112cf576004838101546001600160a01b039081166000908152602092835260408082206006880154909316825291909252812080548392906112c9908490612cf5565b90915550505b811561131c5760058301546001600160a01b039081166000908152600460209081526040808320600688015490941683529290529081208054849290611316908490612cf5565b90915550505b6004830154600584015460408051858152602081018590526001600160a01b03938416939092169189917fca3e6079b726e7728802a0537949e2d1c7762304fa641fb06eb56daf2ba8c6b99101610dbf565b6113766124b1565b336000908152600760209081526040808320805482518185028101850190935280835291929091908301828280156113cd57602002820191906000526020600020905b8154815260200190600101908083116113b9575b5050505050905060005b81518110156114e75760008282815181106113f4576113f4612cb3565b60209081029190910181015160008181526006808452604080832081516101008101835281548152600182015496810196909652600281015491860191909152600380820154606087015260048201546001600160a01b0390811660808801526005830154811660a08801529282015492831660c087015293955091939260e0840191600160a01b900460ff169081111561149157611491612ab0565b60038111156114a2576114a2612ab0565b905250905060008160e0015160038111156114bf576114bf612ab0565b036114d2576114d2828260800151611cb6565b505080806114df90612cc9565b9150506113d7565b50506114f36001600055565b565b61153a6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081018290529060e082015290565b60008281526006602081815260409283902083516101008101855281548152600182015492810192909252600281015493820193909352600380840154606083015260048401546001600160a01b0390811660808401526005850154811660a08401529284015492831660c083015290929160e0840191600160a01b90910460ff16908111156115cc576115cc612ab0565b60038111156115dd576115dd612ab0565b90525092915050565b600081815260066020818152604080842081516101008101835281548152600182015493810193909352600281015491830191909152600380820154606084015260048201546001600160a01b0390811660808501526005830154811660a08501529382015493841660c0840152849360e0840191600160a01b90910460ff169081111561167657611676612ab0565b600381111561168757611687612ab0565b9052509050600061169784611b8c565b905060008183602001516116ab9190612ce2565b95945050505050565b600082815260066020818152604080842081516101008101835281548152600182015493810193909352600281015491830191909152600380820154606084015260048201546001600160a01b0390811660808501526005830154811660a08501529382015493841660c084015286949360e0840191600160a01b90910460ff169081111561174557611745612ab0565b600381111561175657611756612ab0565b8152505090508060a001516001600160a01b0316336001600160a01b0316146117915760405162461bcd60e51b815260040161073490612bf5565b600084815260066020526040902060016006820154600160a01b900460ff1660038111156117c1576117c1612ab0565b146117de5760405162461bcd60e51b815260040161073490612c36565b836117fc5760058101546117fc9086906001600160a01b0316611cb6565b60036006820154600160a01b900460ff16600381111561181e5761181e612ab0565b14610ae15760068101805460ff60a01b191690556004810154600582015460405186151581526001600160a01b03928316929091169087907f94b914f6fc99ae7b467d566845d15a3eea9ad6ff15972091b1ab9bdc1da60a2f906020015b60405180910390a45050505050565b42610ae18484838086611f2e565b6001600160a01b038116600090815260086020908152604091829020805483518184028101840190945280845260609392830182828015610e975760200282019190600052602060002090815481526020019060010190808311610e835750505050509050919050565b60008260000361194b5760405162461bcd60e51b815260206004820152601360248201527215d85b1b195d0e8816995c9bc8185b5bdd5b9d606a1b6044820152606401610734565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614806119bc57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b611a085760405162461bcd60e51b815260206004820152601a60248201527f57616c6c65743a204f6e6c79205553444320616e6420555344540000000000006044820152606401610734565b3360009081526004602090815260408083206001600160a01b038616845290915281208054859290611a3b908490612cf5565b90915550829050611a576001600160a01b03821633308761253f565b60405184815233906001600160a01b038516907f375bc8be397dcc4a4f240050878666d4ed8b2fdb97e9cd3cacd97dc415ab7a909060200160405180910390a3509192915050565b600081815260066020818152604080842081516101008101835281548152600182015493810193909352600281015491830191909152600380820154606084015260048201546001600160a01b0390811660808501526005830154811660a08501529382015493841660c0840152849360e0840191600160a01b90910460ff1690811115611b2f57611b2f612ab0565b6003811115611b4057611b40612ab0565b905250604081015190915042908111611b5d575060009392505050565b8160600151811015611b785760408201516108819082612ce2565b816040015182606001516108819190612ce2565b600081815260066020818152604080842081516101008101835281548152600182015493810193909352600281015491830191909152600380820154606084015260048201546001600160a01b0390811660808501526005830154811660a08501529382015493841660c0840152849360e0840191600160a01b90910460ff1690811115611c1c57611c1c612ab0565b6003811115611c2d57611c2d612ab0565b90525090506000611c3d84611a9f565b9050600082604001518360600151611c559190612ce2565b90506000818460000151611c699190612d08565b90506000611c778285612c83565b9050846020015185600001511115611cac5760208501518551600091611c9c91612ce2565b9050611ca88183612ce2565b9150505b9695505050505050565b6000828152600660205260408120600381015490919042908110611d255760018301805460009182905560068501805460ff60a01b1916600360a01b17905560405190935086917fdfd517ed69f8a0a57d49fe494e4864fac3cfe3585c14c0bfddf39f72463ec3fd91a2611d46565b611d2e85611b8c565b9150818360010154611d409190612ce2565b60018401555b8115610ae1576001600160a01b038085166000908152600460209081526040808320600688015490941683529290529081208054849290611d88908490612cf5565b909155505060048301546005840154604080516001600160a01b03888116825260208201879052938416939092169188917f14fb18a6159cb964441ea40f176151c2d2a3db8c8152e81e410e2524288736e4910161187c565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015611e31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e559190612c9a565b905081811015611e915760405163e570110f60e01b81526001600160a01b03841660048201526024810182905260448101839052606401610734565b611e9e8484848403612578565b50505050565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015611ef4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f189190612c9a565b9050611e9e8484611f298585612cf5565b612578565b6000611f386124b1565b6001600160a01b03861615801590611f5957506001600160a01b0386163014155b8015611f6e57506001600160a01b0386163314155b611fc65760405162461bcd60e51b815260206004820152602360248201527f53747265616d3a20496e76616c69642062656e6566696369617279206164647260448201526265737360e81b6064820152608401610734565b8460000361200c5760405162461bcd60e51b815260206004820152601360248201527214dd1c99585b4e8816995c9bc8185b5bdd5b9d606a1b6044820152606401610734565b600354604051630da0e59160e41b8152600481018790526000916001600160a01b03169063da0e591090602401602060405180830381865afa158015612056573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207a9190612c9a565b3360009081526004602090815260408083206001600160a01b03881684529091529020549091508111156120f05760405162461bcd60e51b815260206004820152601a60248201527f53747265616d3a204e6f7420656e6f7567682062616c616e63650000000000006044820152606401610734565b600354604051633ffbd86960e11b8152600481018890526001600160a01b03858116602483015290911690637ff7b0d290604401600060405180830381600087803b15801561213e57600080fd5b505af1158015612152573d6000803e3d6000fd5b50429250600091505086158061216757508187105b15612173575080612176565b50855b6005805490600061218683612cc9565b90915550506005546000908152600660205260409020818710156121ec5760405162461bcd60e51b815260206004820152601960248201527f53747265616d3a20496e76616c69642073746f702074696d65000000000000006044820152606401610734565b81870361228c578881556000600182018190556002820184905560038201849055600480830180546001600160a01b038e81166001600160a01b031992831681179093556005860180549092163317909155600685018054918b166001600160a81b03199092168217600360a01b179055908352602091825260408084209184529152812080548b9290612281908490612cf5565b9091555061235b9050565b60006122988389612ce2565b9050808a116122f85760405162461bcd60e51b815260206004820152602660248201527f53747265616d3a204465706f73697420736d616c6c6572207468616e2074696d60448201526519481b19599d60d21b6064820152608401610734565b508881556001810189905560028101829055600381018790556004810180546001600160a01b038c81166001600160a01b031992831617909255600583018054909116331790556006820180549188166001600160a81b03199092169190911790555b3360009081526004602090815260408083206001600160a01b038a1684529091528120805486929061238e908490612ce2565b92505081905550600760008b6001600160a01b03166001600160a01b03168152602001908152602001600020600554908060018154018082558091505060019003906000526020600020016000909190919091505560086000336001600160a01b03166001600160a01b03168152602001908152602001600020600554908060018154018082558091505060019003906000526020600020016000909190919091505560008160060160149054906101000a900460ff1690508a6001600160a01b0316336001600160a01b03166005547fd4f5f95572ac933ff839819bc763664528bf9cb6302b2d0e05e1462d20b2a5be8d8b888e88604051612495959493929190612d2a565b60405180910390a4600554955050505050506116ab6001600055565b6002600054036124d457604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6040516001600160a01b0383811660248301526044820183905261253a91859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050612604565b505050565b6040516001600160a01b038481166024830152838116604483015260648201839052611e9e9186918216906323b872dd90608401612508565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526125c98482612667565b611e9e576040516001600160a01b038481166024830152600060448301526125fe91869182169063095ea7b390606401612508565b611e9e84825b60006126196001600160a01b0384168361270a565b9050805160001415801561263e57508080602001905181019061263c9190612d5b565b155b1561253a57604051635274afe760e01b81526001600160a01b0384166004820152602401610734565b6000806000846001600160a01b0316846040516126849190612d78565b6000604051808303816000865af19150503d80600081146126c1576040519150601f19603f3d011682016040523d82523d6000602084013e6126c6565b606091505b50915091508180156126f05750805115806126f05750808060200190518101906126f09190612d5b565b80156116ab5750505050506001600160a01b03163b151590565b60606127188383600061271f565b9392505050565b6060814710156127445760405163cd78605960e01b8152306004820152602401610734565b600080856001600160a01b031684866040516127609190612d78565b60006040518083038185875af1925050503d806000811461279d576040519150601f19603f3d011682016040523d82523d6000602084013e6127a2565b606091505b5091509150611cac8683836060826127c2576127bd82612809565b612718565b81511580156127d957506001600160a01b0384163b155b1561280257604051639996b31560e01b81526001600160a01b0385166004820152602401610734565b5080612718565b8051156128195780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60006020828403121561284457600080fd5b5035919050565b80356001600160a01b038116811461286257600080fd5b919050565b60006020828403121561287957600080fd5b6127188261284b565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126128a957600080fd5b8135602067ffffffffffffffff808311156128c6576128c6612882565b8260051b604051601f19603f830116810181811084821117156128eb576128eb612882565b60405293845285810183019383810192508785111561290957600080fd5b83870191505b8482101561292f576129208261284b565b8352918301919083019061290f565b979650505050505050565b60008060006060848603121561294f57600080fd5b833567ffffffffffffffff81111561296657600080fd5b61297286828701612898565b935050602084013591506129886040850161284b565b90509250925092565b600080600080600060a086880312156129a957600080fd5b6129b28661284b565b94506020860135935060408601359250606086013591506129d56080870161284b565b90509295509295909350565b600080600080600060a086880312156129f957600080fd5b853567ffffffffffffffff811115612a1057600080fd5b612a1c88828901612898565b9550506020860135935060408601359250606086013591506129d56080870161284b565b6020808252825182820181905260009190848201906040850190845b81811015612a7857835183529284019291840191600101612a5c565b50909695505050505050565b60008060408385031215612a9757600080fd5b82359150612aa76020840161284b565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b60048110612ae457634e487b7160e01b600052602160045260246000fd5b9052565b60006101008201905082518252602083015160208301526040830151604083015260608301516060830152608083015160018060a01b0380821660808501528060a08601511660a08501528060c08601511660c0850152505060e0830151612b5360e0840182612ac6565b5092915050565b8015158114610a9157600080fd5b60008060408385031215612b7b57600080fd5b823591506020830135612b8d81612b5a565b809150509250929050565b600080600060608486031215612bad57600080fd5b612bb68461284b565b9250602084013591506129886040850161284b565b60008060408385031215612bde57600080fd5b612be78361284b565b9150612aa76020840161284b565b60208082526021908201527f53747265616d3a204f6e6c792073747265616d206f776e657220616c6c6f77656040820152601960fa1b606082015260800190565b6020808252601f908201527f53747265616d3a2053747265616d20696e636f72726563742073746174757300604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176110ba576110ba612c6d565b600060208284031215612cac57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600060018201612cdb57612cdb612c6d565b5060010190565b818103818111156110ba576110ba612c6d565b808201808211156110ba576110ba612c6d565b600082612d2557634e487b7160e01b600052601260045260246000fd5b500490565b8581526001600160a01b0385166020820152604081018490526060810183905260a08101611cac6080830184612ac6565b600060208284031215612d6d57600080fd5b815161271881612b5a565b6000825160005b81811015612d995760208186018101518583015201612d7f565b50600092019182525091905056fea26469706673582212200f8eff82eddbdf40e844035a031c546f935ac9c8894287d6cdf07ee177fdc3db64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106101c65760003560e01c80639db60550116100f7578063d0fb020311610095578063ed8ec19411610064578063ed8ec194146105a9578063f03cc7bd146105ec578063f3a395b11461060c578063fa0f460b1461064257600080fd5b8063d0fb0203146104ea578063dbe0b5b21461050a578063dd7041ef1461053d578063ddb99ee21461057557600080fd5b8063ac458e01116100d1578063ac458e011461046a578063ad5357331461048a578063b74db3fb146104aa578063cfed9199146104ca57600080fd5b80639db60550146103f45780639ea3e3c814610414578063a47810291461044a57600080fd5b80633e59ec51116101645780636db9241b1161013e5780636db9241b1461035e578063804b40961461037e578063853828b6146103b25780638ed031cb146103c757600080fd5b80633e59ec51146102ca5780634b7dd8e6146102f7578063601351961461033e57600080fd5b80632c259fbd116101a05780632c259fbd1461024a5780632e1a7d4d1461026a57806331edc6f71461028a57806339493cdc146102aa57600080fd5b8063136439dd146101d557806316366cda146101f757806328413ead1461022a57600080fd5b366101d057600080fd5b600080fd5b3480156101e157600080fd5b506101f56101f0366004612832565b610657565b005b34801561020357600080fd5b50610217610212366004612832565b610802565b6040519081526020015b60405180910390f35b34801561023657600080fd5b506101f5610245366004612867565b610889565b34801561025657600080fd5b506101f561026536600461293a565b610a94565b34801561027657600080fd5b506101f5610285366004612832565b610ae8565b34801561029657600080fd5b506101f56102a5366004612991565b610dd6565b3480156102b657600080fd5b506101f56102c53660046129e1565b610deb565b3480156102d657600080fd5b506102ea6102e5366004612867565b610e37565b6040516102219190612a40565b34801561030357600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b039091168152602001610221565b34801561034a57600080fd5b50610217610359366004612a84565b610ea3565b34801561036a57600080fd5b506101f5610379366004612832565b6110c0565b34801561038a57600080fd5b506103267f000000000000000000000000000000000000000000000000000000000000000081565b3480156103be57600080fd5b506101f561136e565b3480156103d357600080fd5b506103e76103e2366004612832565b6114f5565b6040516102219190612ae8565b34801561040057600080fd5b5061021761040f366004612832565b6115e6565b34801561042057600080fd5b5061021761042f366004612867565b6001600160a01b031660009081526007602052604090205490565b34801561045657600080fd5b506101f5610465366004612b68565b6116b4565b34801561047657600080fd5b506101f5610485366004612b98565b61188b565b34801561049657600080fd5b506102ea6104a5366004612867565b611899565b3480156104b657600080fd5b506102176104c5366004612a84565b611903565b3480156104d657600080fd5b506102176104e5366004612832565b611a9f565b3480156104f657600080fd5b50600354610326906001600160a01b031681565b34801561051657600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610326565b34801561054957600080fd5b50610217610558366004612bcb565b600460209081526000928352604080842090915290825290205481565b34801561058157600080fd5b506103267f000000000000000000000000000000000000000000000000000000000000000081565b3480156105b557600080fd5b506102176105c4366004612867565b3360009081526004602090815260408083206001600160a01b03949094168352929052205490565b3480156105f857600080fd5b50610217610607366004612832565b611b8c565b34801561061857600080fd5b50610217610627366004612867565b6001600160a01b031660009081526008602052604090205490565b34801561064e57600080fd5b50600554610217565b600081815260066020818152604080842081516101008101835281548152600182015493810193909352600281015491830191909152600380820154606084015260048201546001600160a01b0390811660808501526005830154811660a08501529382015493841660c084015285949360e0840191600160a01b90910460ff16908111156106e8576106e8612ab0565b60038111156106f9576106f9612ab0565b8152505090508060a001516001600160a01b0316336001600160a01b03161461073d5760405162461bcd60e51b815260040161073490612bf5565b60405180910390fd5b6000838152600660205260408120906006820154600160a01b900460ff16600381111561076c5761076c612ab0565b146107895760405162461bcd60e51b815260040161073490612c36565b60068101805460ff60a01b1916600160a01b17905560048101546107b79085906001600160a01b0316611cb6565b600481015460058201546040516001600160a01b03928316929091169086907f5d9d98f2b748ac9996283b853e50f8757959dfd0141b5265270f538e172e70a090600090a450505050565b6000808061081384620f4240612c83565b600354604051630da0e59160e41b8152600481018390529192506001600160a01b03169063da0e591090602401602060405180830381865afa15801561085d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108819190612c9a565b949350505050565b6001546001600160a01b031633146108fc5760405162461bcd60e51b815260206004820152603060248201527f4665654d616e616765723a204f6e6c79207468652070726f746f636f6c206d6160448201526f1b9859d95c881a5cc8185b1b1bddd95960821b6064820152608401610734565b6001600160a01b0381161580159061092257506002546001600160a01b03828116911614155b801561093757506001600160a01b0381163314155b6109835760405162461bcd60e51b815260206004820152601f60248201527f57616c6c65743a20496e76616c6964204d616e616765722061646472657373006044820152606401610734565b6003546109be906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691166000611de1565b6003546109f9906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691166000611de1565b600280546001600160a01b03199081166001600160a01b03848116918217909355600380549092168117909155610a55917f00000000000000000000000000000000000000000000000000000000000000001690600019611ea4565b600354610a91906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169116600019611ea4565b50565b4260005b8451811015610ae1576000858281518110610ab557610ab5612cb3565b60200260200101519050610acc8186858688611f2e565b50508080610ad990612cc9565b915050610a98565b5050505050565b610af06124b1565b600081815260066020818152604080842081516101008101835281548152600182015493810193909352600281015491830191909152600380820154606084015260048201546001600160a01b0390811660808501526005830154811660a08501529382015493841660c084015285949360e0840191600160a01b90910460ff1690811115610b8157610b81612ab0565b6003811115610b9257610b92612ab0565b81525050905080608001516001600160a01b0316336001600160a01b031614610c0d5760405162461bcd60e51b815260206004820152602760248201527f53747265616d3a204f6e6c792073747265616d2062656e656669636961727920604482015266185b1b1bddd95960ca1b6064820152608401610734565b6000838152600660205260408120906006820154600160a01b900460ff166003811115610c3c57610c3c612ab0565b14610c595760405162461bcd60e51b815260040161073490612c36565b60008042905080836003015411610cbb5760018301805460009182905560068501805460ff60a01b1916600360a01b17905560405190935087917fdfd517ed69f8a0a57d49fe494e4864fac3cfe3585c14c0bfddf39f72463ec3fd91a2610d2c565b610cc486611b8c565b915060008211610d165760405162461bcd60e51b815260206004820152601c60248201527f53747265616d3a204e6f2062616c616e636520617661696c61626c65000000006044820152606401610734565b818360010154610d269190612ce2565b60018401555b6004838101546001600160a01b03908116600090815260209283526040808220600688015490931682529190925281208054849290610d6c908490612cf5565b909155505060048301546005840154604080516001600160a01b0393841680825260208201879052939092169189917f14fb18a6159cb964441ea40f176151c2d2a3db8c8152e81e410e2524288736e491015b60405180910390a45050505050610a916001600055565b610de38585858585611f2e565b505050505050565b60005b8551811015610de3576000868281518110610e0b57610e0b612cb3565b60200260200101519050610e228187878787611f2e565b50508080610e2f90612cc9565b915050610dee565b6001600160a01b038116600090815260076020908152604091829020805483518184028101840190945280845260609392830182828015610e9757602002820191906000526020600020905b815481526020019060010190808311610e83575b50505050509050919050565b6000610ead6124b1565b82600003610ef35760405162461bcd60e51b815260206004820152601360248201527215d85b1b195d0e8816995c9bc8185b5bdd5b9d606a1b6044820152606401610734565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161480610f6457507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b610fb05760405162461bcd60e51b815260206004820152601b60248201527f57616c6c65743a204f6e6c7920205553444320616e64205553445400000000006044820152606401610734565b3360009081526004602090815260408083206001600160a01b03861684529091529020548311156110235760405162461bcd60e51b815260206004820152601a60248201527f57616c6c65743a204e6f7420656e6f7567682062616c616e63650000000000006044820152606401610734565b3360009081526004602090815260408083206001600160a01b038616845290915281208054859290611056908490612ce2565b909155508290506110716001600160a01b03821633866124db565b60405184815233906001600160a01b038516907f01aaa55c201cb0eb4845059eb5158ccc9dfeb0f477d3af4a5dd6da300e77603c9060200160405180910390a350506001600055815b92915050565b6110c86124b1565b600081815260066020818152604080842081516101008101835281548152600182015493810193909352600281015491830191909152600380820154606084015260048201546001600160a01b0390811660808501526005830154811660a08501529382015493841660c084015285949360e0840191600160a01b90910460ff169081111561115957611159612ab0565b600381111561116a5761116a612ab0565b8152505090508060a001516001600160a01b0316336001600160a01b0316146111a55760405162461bcd60e51b815260040161073490612bf5565b6000838152600660205260408120906006820154600160a01b900460ff1660038111156111d4576111d4612ab0565b14806111ff575060016006820154600160a01b900460ff1660038111156111fd576111fd612ab0565b145b61121b5760405162461bcd60e51b815260040161073490612c36565b60016006820154600160a01b900460ff16600381111561123d5761123d612ab0565b0361124d5761124d8460006116b4565b6000611258856115e6565b9050600061126586611b8c565b60068401805460ff60a01b1916600160a11b17905560006001850155905080156112cf576004838101546001600160a01b039081166000908152602092835260408082206006880154909316825291909252812080548392906112c9908490612cf5565b90915550505b811561131c5760058301546001600160a01b039081166000908152600460209081526040808320600688015490941683529290529081208054849290611316908490612cf5565b90915550505b6004830154600584015460408051858152602081018590526001600160a01b03938416939092169189917fca3e6079b726e7728802a0537949e2d1c7762304fa641fb06eb56daf2ba8c6b99101610dbf565b6113766124b1565b336000908152600760209081526040808320805482518185028101850190935280835291929091908301828280156113cd57602002820191906000526020600020905b8154815260200190600101908083116113b9575b5050505050905060005b81518110156114e75760008282815181106113f4576113f4612cb3565b60209081029190910181015160008181526006808452604080832081516101008101835281548152600182015496810196909652600281015491860191909152600380820154606087015260048201546001600160a01b0390811660808801526005830154811660a08801529282015492831660c087015293955091939260e0840191600160a01b900460ff169081111561149157611491612ab0565b60038111156114a2576114a2612ab0565b905250905060008160e0015160038111156114bf576114bf612ab0565b036114d2576114d2828260800151611cb6565b505080806114df90612cc9565b9150506113d7565b50506114f36001600055565b565b61153a6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081018290529060e082015290565b60008281526006602081815260409283902083516101008101855281548152600182015492810192909252600281015493820193909352600380840154606083015260048401546001600160a01b0390811660808401526005850154811660a08401529284015492831660c083015290929160e0840191600160a01b90910460ff16908111156115cc576115cc612ab0565b60038111156115dd576115dd612ab0565b90525092915050565b600081815260066020818152604080842081516101008101835281548152600182015493810193909352600281015491830191909152600380820154606084015260048201546001600160a01b0390811660808501526005830154811660a08501529382015493841660c0840152849360e0840191600160a01b90910460ff169081111561167657611676612ab0565b600381111561168757611687612ab0565b9052509050600061169784611b8c565b905060008183602001516116ab9190612ce2565b95945050505050565b600082815260066020818152604080842081516101008101835281548152600182015493810193909352600281015491830191909152600380820154606084015260048201546001600160a01b0390811660808501526005830154811660a08501529382015493841660c084015286949360e0840191600160a01b90910460ff169081111561174557611745612ab0565b600381111561175657611756612ab0565b8152505090508060a001516001600160a01b0316336001600160a01b0316146117915760405162461bcd60e51b815260040161073490612bf5565b600084815260066020526040902060016006820154600160a01b900460ff1660038111156117c1576117c1612ab0565b146117de5760405162461bcd60e51b815260040161073490612c36565b836117fc5760058101546117fc9086906001600160a01b0316611cb6565b60036006820154600160a01b900460ff16600381111561181e5761181e612ab0565b14610ae15760068101805460ff60a01b191690556004810154600582015460405186151581526001600160a01b03928316929091169087907f94b914f6fc99ae7b467d566845d15a3eea9ad6ff15972091b1ab9bdc1da60a2f906020015b60405180910390a45050505050565b42610ae18484838086611f2e565b6001600160a01b038116600090815260086020908152604091829020805483518184028101840190945280845260609392830182828015610e975760200282019190600052602060002090815481526020019060010190808311610e835750505050509050919050565b60008260000361194b5760405162461bcd60e51b815260206004820152601360248201527215d85b1b195d0e8816995c9bc8185b5bdd5b9d606a1b6044820152606401610734565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614806119bc57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b611a085760405162461bcd60e51b815260206004820152601a60248201527f57616c6c65743a204f6e6c79205553444320616e6420555344540000000000006044820152606401610734565b3360009081526004602090815260408083206001600160a01b038616845290915281208054859290611a3b908490612cf5565b90915550829050611a576001600160a01b03821633308761253f565b60405184815233906001600160a01b038516907f375bc8be397dcc4a4f240050878666d4ed8b2fdb97e9cd3cacd97dc415ab7a909060200160405180910390a3509192915050565b600081815260066020818152604080842081516101008101835281548152600182015493810193909352600281015491830191909152600380820154606084015260048201546001600160a01b0390811660808501526005830154811660a08501529382015493841660c0840152849360e0840191600160a01b90910460ff1690811115611b2f57611b2f612ab0565b6003811115611b4057611b40612ab0565b905250604081015190915042908111611b5d575060009392505050565b8160600151811015611b785760408201516108819082612ce2565b816040015182606001516108819190612ce2565b600081815260066020818152604080842081516101008101835281548152600182015493810193909352600281015491830191909152600380820154606084015260048201546001600160a01b0390811660808501526005830154811660a08501529382015493841660c0840152849360e0840191600160a01b90910460ff1690811115611c1c57611c1c612ab0565b6003811115611c2d57611c2d612ab0565b90525090506000611c3d84611a9f565b9050600082604001518360600151611c559190612ce2565b90506000818460000151611c699190612d08565b90506000611c778285612c83565b9050846020015185600001511115611cac5760208501518551600091611c9c91612ce2565b9050611ca88183612ce2565b9150505b9695505050505050565b6000828152600660205260408120600381015490919042908110611d255760018301805460009182905560068501805460ff60a01b1916600360a01b17905560405190935086917fdfd517ed69f8a0a57d49fe494e4864fac3cfe3585c14c0bfddf39f72463ec3fd91a2611d46565b611d2e85611b8c565b9150818360010154611d409190612ce2565b60018401555b8115610ae1576001600160a01b038085166000908152600460209081526040808320600688015490941683529290529081208054849290611d88908490612cf5565b909155505060048301546005840154604080516001600160a01b03888116825260208201879052938416939092169188917f14fb18a6159cb964441ea40f176151c2d2a3db8c8152e81e410e2524288736e4910161187c565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015611e31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e559190612c9a565b905081811015611e915760405163e570110f60e01b81526001600160a01b03841660048201526024810182905260448101839052606401610734565b611e9e8484848403612578565b50505050565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015611ef4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f189190612c9a565b9050611e9e8484611f298585612cf5565b612578565b6000611f386124b1565b6001600160a01b03861615801590611f5957506001600160a01b0386163014155b8015611f6e57506001600160a01b0386163314155b611fc65760405162461bcd60e51b815260206004820152602360248201527f53747265616d3a20496e76616c69642062656e6566696369617279206164647260448201526265737360e81b6064820152608401610734565b8460000361200c5760405162461bcd60e51b815260206004820152601360248201527214dd1c99585b4e8816995c9bc8185b5bdd5b9d606a1b6044820152606401610734565b600354604051630da0e59160e41b8152600481018790526000916001600160a01b03169063da0e591090602401602060405180830381865afa158015612056573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207a9190612c9a565b3360009081526004602090815260408083206001600160a01b03881684529091529020549091508111156120f05760405162461bcd60e51b815260206004820152601a60248201527f53747265616d3a204e6f7420656e6f7567682062616c616e63650000000000006044820152606401610734565b600354604051633ffbd86960e11b8152600481018890526001600160a01b03858116602483015290911690637ff7b0d290604401600060405180830381600087803b15801561213e57600080fd5b505af1158015612152573d6000803e3d6000fd5b50429250600091505086158061216757508187105b15612173575080612176565b50855b6005805490600061218683612cc9565b90915550506005546000908152600660205260409020818710156121ec5760405162461bcd60e51b815260206004820152601960248201527f53747265616d3a20496e76616c69642073746f702074696d65000000000000006044820152606401610734565b81870361228c578881556000600182018190556002820184905560038201849055600480830180546001600160a01b038e81166001600160a01b031992831681179093556005860180549092163317909155600685018054918b166001600160a81b03199092168217600360a01b179055908352602091825260408084209184529152812080548b9290612281908490612cf5565b9091555061235b9050565b60006122988389612ce2565b9050808a116122f85760405162461bcd60e51b815260206004820152602660248201527f53747265616d3a204465706f73697420736d616c6c6572207468616e2074696d60448201526519481b19599d60d21b6064820152608401610734565b508881556001810189905560028101829055600381018790556004810180546001600160a01b038c81166001600160a01b031992831617909255600583018054909116331790556006820180549188166001600160a81b03199092169190911790555b3360009081526004602090815260408083206001600160a01b038a1684529091528120805486929061238e908490612ce2565b92505081905550600760008b6001600160a01b03166001600160a01b03168152602001908152602001600020600554908060018154018082558091505060019003906000526020600020016000909190919091505560086000336001600160a01b03166001600160a01b03168152602001908152602001600020600554908060018154018082558091505060019003906000526020600020016000909190919091505560008160060160149054906101000a900460ff1690508a6001600160a01b0316336001600160a01b03166005547fd4f5f95572ac933ff839819bc763664528bf9cb6302b2d0e05e1462d20b2a5be8d8b888e88604051612495959493929190612d2a565b60405180910390a4600554955050505050506116ab6001600055565b6002600054036124d457604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6040516001600160a01b0383811660248301526044820183905261253a91859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050612604565b505050565b6040516001600160a01b038481166024830152838116604483015260648201839052611e9e9186918216906323b872dd90608401612508565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526125c98482612667565b611e9e576040516001600160a01b038481166024830152600060448301526125fe91869182169063095ea7b390606401612508565b611e9e84825b60006126196001600160a01b0384168361270a565b9050805160001415801561263e57508080602001905181019061263c9190612d5b565b155b1561253a57604051635274afe760e01b81526001600160a01b0384166004820152602401610734565b6000806000846001600160a01b0316846040516126849190612d78565b6000604051808303816000865af19150503d80600081146126c1576040519150601f19603f3d011682016040523d82523d6000602084013e6126c6565b606091505b50915091508180156126f05750805115806126f05750808060200190518101906126f09190612d5b565b80156116ab5750505050506001600160a01b03163b151590565b60606127188383600061271f565b9392505050565b6060814710156127445760405163cd78605960e01b8152306004820152602401610734565b600080856001600160a01b031684866040516127609190612d78565b60006040518083038185875af1925050503d806000811461279d576040519150601f19603f3d011682016040523d82523d6000602084013e6127a2565b606091505b5091509150611cac8683836060826127c2576127bd82612809565b612718565b81511580156127d957506001600160a01b0384163b155b1561280257604051639996b31560e01b81526001600160a01b0385166004820152602401610734565b5080612718565b8051156128195780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60006020828403121561284457600080fd5b5035919050565b80356001600160a01b038116811461286257600080fd5b919050565b60006020828403121561287957600080fd5b6127188261284b565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126128a957600080fd5b8135602067ffffffffffffffff808311156128c6576128c6612882565b8260051b604051601f19603f830116810181811084821117156128eb576128eb612882565b60405293845285810183019383810192508785111561290957600080fd5b83870191505b8482101561292f576129208261284b565b8352918301919083019061290f565b979650505050505050565b60008060006060848603121561294f57600080fd5b833567ffffffffffffffff81111561296657600080fd5b61297286828701612898565b935050602084013591506129886040850161284b565b90509250925092565b600080600080600060a086880312156129a957600080fd5b6129b28661284b565b94506020860135935060408601359250606086013591506129d56080870161284b565b90509295509295909350565b600080600080600060a086880312156129f957600080fd5b853567ffffffffffffffff811115612a1057600080fd5b612a1c88828901612898565b9550506020860135935060408601359250606086013591506129d56080870161284b565b6020808252825182820181905260009190848201906040850190845b81811015612a7857835183529284019291840191600101612a5c565b50909695505050505050565b60008060408385031215612a9757600080fd5b82359150612aa76020840161284b565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b60048110612ae457634e487b7160e01b600052602160045260246000fd5b9052565b60006101008201905082518252602083015160208301526040830151604083015260608301516060830152608083015160018060a01b0380821660808501528060a08601511660a08501528060c08601511660c0850152505060e0830151612b5360e0840182612ac6565b5092915050565b8015158114610a9157600080fd5b60008060408385031215612b7b57600080fd5b823591506020830135612b8d81612b5a565b809150509250929050565b600080600060608486031215612bad57600080fd5b612bb68461284b565b9250602084013591506129886040850161284b565b60008060408385031215612bde57600080fd5b612be78361284b565b9150612aa76020840161284b565b60208082526021908201527f53747265616d3a204f6e6c792073747265616d206f776e657220616c6c6f77656040820152601960fa1b606082015260800190565b6020808252601f908201527f53747265616d3a2053747265616d20696e636f72726563742073746174757300604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176110ba576110ba612c6d565b600060208284031215612cac57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600060018201612cdb57612cdb612c6d565b5060010190565b818103818111156110ba576110ba612c6d565b808201808211156110ba576110ba612c6d565b600082612d2557634e487b7160e01b600052601260045260246000fd5b500490565b8581526001600160a01b0385166020820152604081018490526060810183905260a08101611cac6080830184612ac6565b600060208284031215612d6d57600080fd5b815161271881612b5a565b6000825160005b81811015612d995760208186018101518583015201612d7f565b50600092019182525091905056fea26469706673582212200f8eff82eddbdf40e844035a031c546f935ac9c8894287d6cdf07ee177fdc3db64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedDecreaseAllowance(address,uint256,uint256)": [
        {
          "details": "Indicates a failed `decreaseAllowance` request."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "balanceOfStreamBeneficiary(uint256)": {
        "returns": {
          "balance": "of beneficiary"
        }
      },
      "balanceOfStreamOwner(uint256)": {
        "params": {
          "id": "Stream´s id"
        },
        "returns": {
          "balance": "of owner"
        }
      },
      "cancelStream(uint256)": {
        "details": "If the beneficiary has some unclaimed balance, it will be transfer to him The rest of the balance on the stream will be transfer to the ownerIt fails if the stream doesn´t existIt fails if the caller is not the ownerIt fails if the transfer fails",
        "params": {
          "id": "Stream´s id"
        }
      },
      "depositOnWallet(uint256,address)": {
        "details": "It fails if the token is not USDC or USDTIt fails if the deposit is \"0\"",
        "params": {
          "deposit": "The amount to fund the wallet",
          "tokenAddress": "The token to fund"
        }
      },
      "getBeneficiaryStreamCount(address)": {
        "returns": {
          "_0": "StreamData object"
        }
      },
      "getOwnerStreamCount(address)": {
        "returns": {
          "_0": "StreamData object"
        }
      },
      "getStreamByBeneficiary(address)": {
        "returns": {
          "_0": "StreamData object"
        }
      },
      "getStreamById(uint256)": {
        "returns": {
          "_0": "StreamData object"
        }
      },
      "getStreamByOwner(address)": {
        "returns": {
          "_0": "StreamData object"
        }
      },
      "getWalletBalance(address)": {
        "params": {
          "token": "The token to know user´s balance"
        }
      },
      "instantPayments(address,uint256,address)": {
        "params": {
          "amountToDeposit": "How much to deposit",
          "beneficiary": "The one to receive the payment",
          "tokenAddress": "Tokens address deposited"
        }
      },
      "multipleInstantPayments(address[],uint256,address)": {
        "params": {
          "amountToDeposit": "How much to deposit",
          "beneficiaries": "Array of the ones to receive the payments",
          "tokenAddress": "Tokens address deposited"
        }
      },
      "multipleNewStream(address[],uint256,uint256,uint256,address)": {
        "params": {
          "amountToDeposit": "How much to deposit",
          "beneficiaries": "The one to receive the stream",
          "start": "When the stream starts",
          "stop": "When the stream ends",
          "tokenAddress": "Tokens address deposited"
        }
      },
      "newStream(address,uint256,uint256,uint256,address)": {
        "params": {
          "amountToDeposit": "How much to deposit",
          "beneficiary": "The one to receive the stream",
          "start": "When the stream starts",
          "stop": "When the stream ends",
          "tokenAddress": "Tokens address deposited"
        }
      },
      "pause(uint256)": {
        "details": "It fails if the caller is not the ownerIt fails if the stream is not active",
        "params": {
          "id": "Stream´s id"
        }
      },
      "resumeStream(uint256,bool)": {
        "details": "It fails if the caller is not the ownerIt fails if the stream is not active",
        "params": {
          "id": "Stream´s id",
          "paid": "True if it is a paid pause, false if not"
        }
      },
      "timePassed(uint256)": {
        "returns": {
          "time": "passed"
        }
      },
      "withdraw(uint256)": {
        "details": "It fails if the stream doesn´t existIt fails if the caller is not the beneficiaryIt fails if the amount is bigger than the balance leftIt fails if the transfer fails",
        "params": {
          "id": "Stream´s id"
        }
      },
      "withdrawAll()": {
        "details": "It fails if the stream doesn´t existIt fails if the caller is not the beneficiaryIt fails if the amount is bigger than the balance leftIt fails if the transfer fails"
      },
      "withdrawFromWallet(uint256,address)": {
        "details": "It fails if the token is not USDC or USDTIt fails if the amount is \"0\"It fails if the user does not have enough balance",
        "params": {
          "amount": "The amount to withdraw from wallet",
          "tokenAddress": "The token to withdrw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOfStreamBeneficiary(uint256)": {
        "notice": "Calculate the unclaimed balance of a stream´s beneficiary by giving the id"
      },
      "balanceOfStreamOwner(uint256)": {
        "notice": "Calculate the balance of the stream´s owner by giving the id"
      },
      "cancelStream(uint256)": {
        "notice": "Cancel an existing stream"
      },
      "depositOnWallet(uint256,address)": {
        "notice": "A method to fund the wallet"
      },
      "getBeneficiaryStreamCount(address)": {
        "notice": "Get a beneficiary´s total Streams"
      },
      "getOwnerStreamCount(address)": {
        "notice": "Get a owner´s total Streams"
      },
      "getStreamByBeneficiary(address)": {
        "notice": "Get all beneficiary streams"
      },
      "getStreamById(uint256)": {
        "notice": "Get the Stream by giving the id"
      },
      "getStreamByOwner(address)": {
        "notice": "Get all owner streams"
      },
      "getStreamsNumber()": {
        "notice": "Get the total number of streams"
      },
      "getWalletBalance(address)": {
        "notice": "A method to know user´s balances"
      },
      "instantPayments(address,uint256,address)": {
        "notice": "Unique and instant payments"
      },
      "multipleInstantPayments(address[],uint256,address)": {
        "notice": "Multiple instant payments"
      },
      "multipleNewStream(address[],uint256,uint256,uint256,address)": {
        "notice": "Create multiple new streams"
      },
      "newStream(address,uint256,uint256,uint256,address)": {
        "notice": "Create new streams"
      },
      "pause(uint256)": {
        "notice": "Pause an active stream"
      },
      "resumeStream(uint256,bool)": {
        "notice": "Resume a paused stream"
      },
      "timePassed(uint256)": {
        "notice": "Calculates the stram´s time passed by giving the id"
      },
      "withdraw(uint256)": {
        "notice": "Allow the beneficiary to withdraw the proceeds"
      },
      "withdrawAll()": {
        "notice": "Allow the beneficiary to withdraw the proceeds"
      },
      "withdrawFromWallet(uint256,address)": {
        "notice": "A method to withdraw from wallet"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1375,
        "contract": "contracts/FundU.sol:FundU",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3260,
        "contract": "contracts/FundU.sol:FundU",
        "label": "s_protocolManager",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3272,
        "contract": "contracts/FundU.sol:FundU",
        "label": "s_feeManager",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 3275,
        "contract": "contracts/FundU.sol:FundU",
        "label": "feeManager",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IFeeManager)2736"
      },
      {
        "astId": 3281,
        "contract": "contracts/FundU.sol:FundU",
        "label": "s_userBalanceByToken",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1441,
        "contract": "contracts/FundU.sol:FundU",
        "label": "s_streamId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1446,
        "contract": "contracts/FundU.sol:FundU",
        "label": "s_streamById",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(StreamData)3156_storage)"
      },
      {
        "astId": 1451,
        "contract": "contracts/FundU.sol:FundU",
        "label": "s_beneficiaryStreamsIds",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 1456,
        "contract": "contracts/FundU.sol:FundU",
        "label": "s_ownerStreamsIds",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(IFeeManager)2736": {
        "encoding": "inplace",
        "label": "contract IFeeManager",
        "numberOfBytes": "20"
      },
      "t_enum(StreamStatus)3138": {
        "encoding": "inplace",
        "label": "enum FundUtils.StreamStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(StreamData)3156_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FundUtils.StreamData)",
        "numberOfBytes": "32",
        "value": "t_struct(StreamData)3156_storage"
      },
      "t_struct(StreamData)3156_storage": {
        "encoding": "inplace",
        "label": "struct FundUtils.StreamData",
        "members": [
          {
            "astId": 3140,
            "contract": "contracts/FundU.sol:FundU",
            "label": "deposit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3142,
            "contract": "contracts/FundU.sol:FundU",
            "label": "balanceLeft",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3144,
            "contract": "contracts/FundU.sol:FundU",
            "label": "startTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3146,
            "contract": "contracts/FundU.sol:FundU",
            "label": "stopTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3148,
            "contract": "contracts/FundU.sol:FundU",
            "label": "beneficiary",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 3150,
            "contract": "contracts/FundU.sol:FundU",
            "label": "owner",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 3152,
            "contract": "contracts/FundU.sol:FundU",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 3155,
            "contract": "contracts/FundU.sol:FundU",
            "label": "status",
            "offset": 20,
            "slot": "6",
            "type": "t_enum(StreamStatus)3138"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}