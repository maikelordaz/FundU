{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/FundU.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n/// @author Maikel Ordaz\r\n/// @title FundU\r\npragma solidity 0.8.20;\r\n\r\nimport {UserWallet} from \"./wallet/UserWallet.sol\";\r\n\r\ncontract FundU is UserWallet {\r\n    uint256 private s_streamId;\r\n\r\n    // Streams\r\n    mapping(uint256 => StreamData) private s_streamById; // Fund Id => Fund\r\n    mapping(address => uint256[]) private s_beneficiaryStreamsIds; // address => [fund´s ids]\r\n    mapping(address => uint256[]) private s_ownerStreamsIds; // address => [fund´s ids]\r\n\r\n    /**\r\n     * @notice To check the stream´s owner by giving the id\r\n     */\r\n    modifier onlyStreamOwner(uint256 id) {\r\n        StreamData memory stream = s_streamById[id];\r\n        require(msg.sender == stream.owner, \"Stream: Only stream owner allowed\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice To check the stream´s beneficiary by giving the id\r\n     */\r\n    modifier onlyStreamBeneficiary(uint256 id) {\r\n        StreamData memory stream = s_streamById[id];\r\n        require(msg.sender == stream.beneficiary, \"Stream: Only stream beneficiary allowed\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _feeManager,\r\n        address _protocolManager,\r\n        address _USDC,\r\n        address _USDT\r\n    ) UserWallet(_USDC, _USDT, _protocolManager, _feeManager) {\r\n        s_streamId = 0;\r\n    }\r\n\r\n    receive() external payable {\r\n        revert();\r\n    }\r\n\r\n    /*** MAIN FUNCTIONS ***/\r\n\r\n    /**\r\n     * @notice Create new streams\r\n     * @param _beneficiary The one to receive the stream\r\n     * @param _amountToDeposit How much to deposit\r\n     * @param _start When the stream starts\r\n     * @param _stop When the stream ends\r\n     * @param _tokenAddress Tokens address deposited\r\n     * @return The newly created stream´s id\r\n     * @dev If start and stop are iqual it is an instant payment\r\n     * @dev It fails if the beneficiary is the address zero\r\n     * @dev It fails if the beneficiary is this contract\r\n     * @dev It fails if the beneficiary is the owner\r\n     * @dev It fails if there is no deposit\r\n     * @dev It fails if the stopTime is less that the time when the function is called\r\n     * @dev It fails if the transfer fails\r\n     */\r\n    function _newStream(\r\n        address _beneficiary,\r\n        uint256 _amountToDeposit,\r\n        uint256 _start,\r\n        uint256 _stop,\r\n        address _tokenAddress\r\n    ) internal nonReentrant returns (uint256) {\r\n        require(\r\n            _beneficiary != address(0x00) &&\r\n                _beneficiary != address(this) &&\r\n                _beneficiary != msg.sender,\r\n            \"Stream: Invalid beneficiary address\"\r\n        );\r\n        require(_amountToDeposit != 0, \"Stream: Zero amount\");\r\n\r\n        uint256 _depositPlusFees;\r\n\r\n        _depositPlusFees = feeManager.mustHaveBalance(_amountToDeposit);\r\n        require(\r\n            s_userBalanceByToken[msg.sender][_tokenAddress] >= _depositPlusFees,\r\n            \"Stream: Not enough balance\"\r\n        );\r\n        feeManager.collectFee(_amountToDeposit, _tokenAddress);\r\n\r\n        uint256 _time = block.timestamp;\r\n        uint256 _startTime;\r\n\r\n        // If start is zero or less than the actual time the start time will be set to block.timestamp\r\n        if (_start == 0 || _start < _time) {\r\n            _startTime = _time;\r\n        } else {\r\n            _startTime = _start;\r\n        }\r\n\r\n        s_streamId++;\r\n\r\n        StreamData storage stream = s_streamById[s_streamId];\r\n\r\n        require(_stop >= _startTime, \"Stream: Invalid stop time\");\r\n\r\n        if (_stop == _startTime) {\r\n            // This will manage it like an instant payment\r\n            stream.deposit = _amountToDeposit;\r\n            stream.balanceLeft = 0;\r\n            stream.startTime = _time;\r\n            stream.stopTime = _time;\r\n            stream.beneficiary = _beneficiary;\r\n            stream.owner = msg.sender;\r\n            stream.tokenAddress = _tokenAddress;\r\n            stream.status = StreamStatus.Completed;\r\n\r\n            // Transfer the balance directly to the beneficiary protocol´s wallet\r\n            s_userBalanceByToken[_beneficiary][_tokenAddress] += _amountToDeposit;\r\n        } else {\r\n            // This will manage it like a stream\r\n            uint256 _duration = _stop - _startTime;\r\n\r\n            // This check is to ensure a rate per second, bigger than 0\r\n            require(_amountToDeposit > _duration, \"Stream: Deposit smaller than time left\");\r\n\r\n            stream.deposit = _amountToDeposit;\r\n            stream.balanceLeft = _amountToDeposit;\r\n            stream.startTime = _startTime;\r\n            stream.stopTime = _stop;\r\n            stream.beneficiary = _beneficiary;\r\n            stream.owner = msg.sender;\r\n            stream.tokenAddress = _tokenAddress;\r\n            stream.status = StreamStatus.Active;\r\n        }\r\n\r\n        // The owner balance will be locked on streams and take away on instant payments\r\n\r\n        s_userBalanceByToken[msg.sender][_tokenAddress] -= _depositPlusFees;\r\n\r\n        s_beneficiaryStreamsIds[_beneficiary].push(s_streamId);\r\n        s_ownerStreamsIds[msg.sender].push(s_streamId);\r\n\r\n        StreamStatus status = stream.status;\r\n\r\n        emit NewStream(\r\n            s_streamId,\r\n            msg.sender,\r\n            _beneficiary,\r\n            _amountToDeposit,\r\n            _tokenAddress,\r\n            _startTime,\r\n            _stop,\r\n            status\r\n        );\r\n\r\n        return s_streamId;\r\n    }\r\n\r\n    /**\r\n     * @notice An internal function to manage withdraws on the Pause and Resume functions\r\n     * @param _id The stream´s id\r\n     * @param _who The one who receive the transfer\r\n     * @dev _who can be the stream´s beneficiary or the stream´s owner\r\n     */\r\n    function _withdrawPauseAndResume(uint256 _id, address _who) private {\r\n        StreamData storage stream = s_streamById[_id];\r\n\r\n        uint256 _balance = 0;\r\n        uint256 _time = block.timestamp;\r\n\r\n        if (stream.stopTime <= _time) {\r\n            _balance = stream.balanceLeft;\r\n            stream.balanceLeft = 0;\r\n            stream.status = StreamStatus.Completed;\r\n\r\n            emit Completed(_id);\r\n        } else {\r\n            _balance = balanceOfStreamBeneficiary(_id);\r\n            stream.balanceLeft = stream.balanceLeft - _balance;\r\n        }\r\n\r\n        if (_balance > 0) {\r\n            s_userBalanceByToken[_who][stream.tokenAddress] += _balance;\r\n\r\n            emit Withdraw(_id, stream.owner, stream.beneficiary, _who, _balance);\r\n        }\r\n    }\r\n\r\n    /*** INSTANT PAYMENTS RELATED ***/\r\n    /**\r\n     * @notice Unique and instant payments\r\n     * @param beneficiary The one to receive the payment\r\n     * @param amountToDeposit How much to deposit\r\n     * @param tokenAddress Tokens address deposited\r\n     */\r\n    function instantPayments(\r\n        address beneficiary,\r\n        uint256 amountToDeposit,\r\n        address tokenAddress\r\n    ) external {\r\n        uint256 time = block.timestamp;\r\n        _newStream(beneficiary, amountToDeposit, time, time, tokenAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Multiple instant payments\r\n     * @param beneficiaries Array of the ones to receive the payments\r\n     * @param amountToDeposit How much to deposit\r\n     * @param tokenAddress Tokens address deposited\r\n     */\r\n    function multipleInstantPayments(\r\n        address[] memory beneficiaries,\r\n        uint256 amountToDeposit,\r\n        address tokenAddress\r\n    ) external {\r\n        uint256 time = block.timestamp;\r\n        for (uint i = 0; i < beneficiaries.length; i++) {\r\n            address beneficiary = beneficiaries[i];\r\n            _newStream(beneficiary, amountToDeposit, time, time, tokenAddress);\r\n        }\r\n    }\r\n\r\n    /*** STREAMS RELATED ***/\r\n\r\n    /**\r\n     * @notice Create new streams\r\n     * @param beneficiary The one to receive the stream\r\n     * @param amountToDeposit How much to deposit\r\n     * @param start When the stream starts\r\n     * @param stop When the stream ends\r\n     * @param tokenAddress Tokens address deposited\r\n     */\r\n    function newStream(\r\n        address beneficiary,\r\n        uint256 amountToDeposit,\r\n        uint256 start,\r\n        uint256 stop,\r\n        address tokenAddress\r\n    ) external {\r\n        _newStream(beneficiary, amountToDeposit, start, stop, tokenAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Create multiple new streams\r\n     * @param beneficiaries The one to receive the stream\r\n     * @param amountToDeposit How much to deposit\r\n     * @param start When the stream starts\r\n     * @param stop When the stream ends\r\n     * @param tokenAddress Tokens address deposited\r\n     */\r\n    function multipleNewStream(\r\n        address[] memory beneficiaries,\r\n        uint256 amountToDeposit,\r\n        uint256 start,\r\n        uint256 stop,\r\n        address tokenAddress\r\n    ) external {\r\n        for (uint i = 0; i < beneficiaries.length; i++) {\r\n            address beneficiary = beneficiaries[i];\r\n            _newStream(beneficiary, amountToDeposit, start, stop, tokenAddress);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Pause an active stream\r\n     * @param id Stream´s id\r\n     * @dev It fails if the caller is not the owner\r\n     * @dev It fails if the stream is not active\r\n     */\r\n    function pause(uint256 id) external onlyStreamOwner(id) {\r\n        StreamData storage stream = s_streamById[id];\r\n\r\n        require(stream.status == StreamStatus.Active, \"Stream: Stream incorrect status\");\r\n\r\n        stream.status = StreamStatus.Paused;\r\n\r\n        _withdrawPauseAndResume(id, stream.beneficiary);\r\n\r\n        emit PauseStream(id, stream.owner, stream.beneficiary);\r\n    }\r\n\r\n    /**\r\n     * @notice Resume a paused stream\r\n     * @param id Stream´s id\r\n     * @param paid True if it is a paid pause, false if not\r\n     * @dev It fails if the caller is not the owner\r\n     * @dev It fails if the stream is not active\r\n     */\r\n    function resumeStream(uint256 id, bool paid) public onlyStreamOwner(id) {\r\n        StreamData storage stream = s_streamById[id];\r\n\r\n        require(stream.status == StreamStatus.Paused, \"Stream: Stream incorrect status\");\r\n\r\n        if (!paid) {\r\n            _withdrawPauseAndResume(id, stream.owner);\r\n        }\r\n\r\n        if (stream.status != StreamStatus.Completed) {\r\n            stream.status = StreamStatus.Active;\r\n\r\n            emit ResumeStream(id, stream.owner, stream.beneficiary, paid);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Cancel an existing stream\r\n     * @param id Stream´s id\r\n     * @dev If the beneficiary has some unclaimed balance, it will be transfer to him\r\n     * The rest of the balance on the stream will be transfer to the owner\r\n     * @dev It fails if the stream doesn´t exist\r\n     * @dev It fails if the caller is not the owner\r\n     * @dev It fails if the transfer fails\r\n     */\r\n    function cancelStream(uint256 id) external nonReentrant onlyStreamOwner(id) {\r\n        StreamData storage stream = s_streamById[id];\r\n\r\n        require(\r\n            stream.status == StreamStatus.Active || stream.status == StreamStatus.Paused,\r\n            \"Stream: Stream incorrect status\"\r\n        );\r\n\r\n        if (stream.status == StreamStatus.Paused) {\r\n            resumeStream(id, false);\r\n        }\r\n\r\n        // Check the balances\r\n        uint256 ownerRemainingBalance = balanceOfStreamOwner(id);\r\n        uint256 beneficiaryRemainingBalance = balanceOfStreamBeneficiary(id);\r\n\r\n        stream.status = StreamStatus.Canceled;\r\n        stream.balanceLeft = 0;\r\n\r\n        if (beneficiaryRemainingBalance > 0) {\r\n            s_userBalanceByToken[stream.beneficiary][\r\n                stream.tokenAddress\r\n            ] += beneficiaryRemainingBalance;\r\n        }\r\n        if (ownerRemainingBalance > 0) {\r\n            s_userBalanceByToken[stream.owner][stream.tokenAddress] += ownerRemainingBalance;\r\n        }\r\n\r\n        emit CancelStream(\r\n            id,\r\n            stream.owner,\r\n            stream.beneficiary,\r\n            ownerRemainingBalance,\r\n            beneficiaryRemainingBalance\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Allow the beneficiary to withdraw the proceeds\r\n     * @dev It fails if the stream doesn´t exist\r\n     * @dev It fails if the caller is not the beneficiary\r\n     * @dev It fails if the amount is bigger than the balance left\r\n     * @dev It fails if the transfer fails\r\n     */\r\n    function withdrawAll() external nonReentrant {\r\n        uint256[] memory beneficiaryIds = s_beneficiaryStreamsIds[msg.sender];\r\n        for (uint i = 0; i < beneficiaryIds.length; i++) {\r\n            uint256 id = beneficiaryIds[i];\r\n            StreamData memory stream = s_streamById[id];\r\n\r\n            if (stream.status == StreamStatus.Active) {\r\n                _withdrawPauseAndResume(id, stream.beneficiary);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Allow the beneficiary to withdraw the proceeds\r\n     * @param id Stream´s id\r\n     * @dev It fails if the stream doesn´t exist\r\n     * @dev It fails if the caller is not the beneficiary\r\n     * @dev It fails if the amount is bigger than the balance left\r\n     * @dev It fails if the transfer fails\r\n     */\r\n    function withdraw(uint256 id) public nonReentrant onlyStreamBeneficiary(id) {\r\n        StreamData storage stream = s_streamById[id];\r\n\r\n        require(stream.status == StreamStatus.Active, \"Stream: Stream incorrect status\");\r\n\r\n        uint256 balance = 0;\r\n\r\n        uint256 time = block.timestamp;\r\n\r\n        if (stream.stopTime <= time) {\r\n            balance = stream.balanceLeft;\r\n            stream.balanceLeft = 0;\r\n            stream.status = StreamStatus.Completed;\r\n\r\n            emit Completed(id);\r\n        } else {\r\n            balance = balanceOfStreamBeneficiary(id);\r\n\r\n            require(balance > 0, \"Stream: No balance available\");\r\n\r\n            stream.balanceLeft = stream.balanceLeft - balance;\r\n        }\r\n\r\n        s_userBalanceByToken[stream.beneficiary][stream.tokenAddress] += balance;\r\n\r\n        emit Withdraw(id, stream.owner, stream.beneficiary, stream.beneficiary, balance);\r\n    }\r\n\r\n    /*** VIEW / PURE FUNCTIONS ***/\r\n\r\n    /*** STREAM´S INFO ***/\r\n    /**\r\n     * @notice Get the total number of streams\r\n     */\r\n    function getStreamsNumber() public view returns (uint256) {\r\n        return s_streamId;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the Stream by giving the id\r\n     * @return StreamData object\r\n     */\r\n    function getStreamById(uint256 id) public view returns (StreamData memory) {\r\n        return s_streamById[id];\r\n    }\r\n\r\n    /*** STREAM BENEFICIARY´S INFO ***/\r\n    /**\r\n     * @notice Get all beneficiary streams\r\n     * @return StreamData object\r\n     */\r\n    function getStreamByBeneficiary(address beneficiary) public view returns (uint256[] memory) {\r\n        return s_beneficiaryStreamsIds[beneficiary];\r\n    }\r\n\r\n    /**\r\n     * @notice Get a beneficiary´s total Streams\r\n     * @return StreamData object\r\n     */\r\n    function getBeneficiaryStreamCount(address beneficiary) public view returns (uint256) {\r\n        return s_beneficiaryStreamsIds[beneficiary].length;\r\n    }\r\n\r\n    /*** STREAM OWNER´S INFO ***/\r\n    /**\r\n     * @notice Get all owner streams\r\n     * @return StreamData object\r\n     */\r\n    function getStreamByOwner(address owner) public view returns (uint256[] memory) {\r\n        return s_ownerStreamsIds[owner];\r\n    }\r\n\r\n    /**\r\n     * @notice Get a owner´s total Streams\r\n     * @return StreamData object\r\n     */\r\n    function getOwnerStreamCount(address owner) public view returns (uint256) {\r\n        return s_ownerStreamsIds[owner].length;\r\n    }\r\n\r\n    /*** AUXILIARS ***/\r\n\r\n    function amountNeeded(uint256 toDeposit) public view returns (uint256) {\r\n        uint256 needed;\r\n\r\n        uint inputFromUser = toDeposit * 10 ** 6;\r\n        needed = (feeManager.mustHaveBalance(inputFromUser));\r\n\r\n        return needed;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate the unclaimed balance of a stream´s beneficiary by giving the id\r\n     * @return balance of beneficiary\r\n     */\r\n    function balanceOfStreamBeneficiary(uint256 id) public view returns (uint256 balance) {\r\n        StreamData memory stream = s_streamById[id];\r\n\r\n        uint256 time = timePassed(id);\r\n        uint256 duration = stream.stopTime - stream.startTime;\r\n        uint256 rate = stream.deposit / duration;\r\n        uint256 beneficiaryBalance = time * rate;\r\n\r\n        // If the deposit is bigger than balanceLeft there has been some withdraws\r\n        if (stream.deposit > stream.balanceLeft) {\r\n            // So check how much the beneficiary has withdraw and calculate the actual balance\r\n            uint256 withdraws = stream.deposit - stream.balanceLeft;\r\n            beneficiaryBalance = beneficiaryBalance - withdraws;\r\n        }\r\n\r\n        return beneficiaryBalance;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate the balance of the stream´s owner by giving the id\r\n     * @param id Stream´s id\r\n     * @return balance of owner\r\n     */\r\n    function balanceOfStreamOwner(uint256 id) public view returns (uint256 balance) {\r\n        StreamData memory stream = s_streamById[id];\r\n        uint256 beneficiaryBalance = balanceOfStreamBeneficiary(id);\r\n\r\n        uint256 ownerBalance = stream.balanceLeft - beneficiaryBalance;\r\n        return ownerBalance;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the stram´s time passed by giving the id\r\n     * @return time passed\r\n     */\r\n    function timePassed(uint256 id) public view returns (uint256 time) {\r\n        StreamData memory stream = s_streamById[id];\r\n        uint256 currentTime = block.timestamp;\r\n        if (currentTime <= stream.startTime) return 0;\r\n        if (currentTime < stream.stopTime) return currentTime - stream.startTime;\r\n        return stream.stopTime - stream.startTime;\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IFeeManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.20;\r\n\r\ninterface IFeeManager {\r\n    event FeeCollected(uint256 feeCollected, address indexed token);\r\n\r\n    function collectFee(uint256 depositAmount, address tokenAddress) external;\r\n\r\n    function withdrawFees(address tokenToWithdraw) external;\r\n\r\n    function setNewFeeManager(address _newManager) external;\r\n\r\n    function setNewTransactionFee(uint256 _newTransactionFee) external;\r\n\r\n    function mustHaveBalance(uint256 deposit) external view returns (uint256);\r\n\r\n    function getProtocolManager() external view returns (address);\r\n\r\n    function getFeeManager() external view returns (address);\r\n\r\n    function getTransactionFee() external view returns (uint256);\r\n}\r\n"
    },
    "contracts/mocks/tUSDC.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.20;\r\n\r\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract tUSDC is ERC20 {\r\n    constructor() ERC20(\"test USDC Token\", \"tUSDC\") {}\r\n\r\n    function mintUSDC(address to, uint256 amount) public {\r\n        _mint(to, amount);\r\n    }\r\n\r\n    function decimals() public pure override returns (uint8) {\r\n        return 6;\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/tUSDT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.20;\r\n\r\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract tUSDT is ERC20 {\r\n    constructor() ERC20(\"test USDT Token\", \"tUSDT\") {}\r\n\r\n    function mintUSDT(address to, uint256 amount) public {\r\n        _mint(to, amount);\r\n    }\r\n\r\n    function decimals() public pure override returns (uint8) {\r\n        return 6;\r\n    }\r\n}\r\n"
    },
    "contracts/utils/FeeManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.20;\r\n\r\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\ncontract FeeManager is ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n\r\n    address private s_protocolManager;\r\n    address private s_feeManager;\r\n    uint8 private s_transactionFee;\r\n\r\n    // Tokens allowed on protocol\r\n    address private immutable i_USDC;\r\n    address private immutable i_USDT;\r\n\r\n    mapping(address => uint256) public s_protocolBalanceByToken; // tokenAddress => balance\r\n\r\n    event FeeCollected(uint256 feeCollected, address indexed token);\r\n    event NewFeeManager(address indexed newManager);\r\n    event NewTransactionFee(uint8 newTransactionFee);\r\n\r\n    /**\r\n     * @notice To check the fee manager is the appropiate\r\n     */\r\n    modifier onlyFeeManager() {\r\n        require(msg.sender == s_feeManager, \"FeeManager: Only the fee managers allowed\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice To check the protocol Manager is the appropiate\r\n     */\r\n    modifier onlyProtocolManager() {\r\n        require(\r\n            msg.sender == s_protocolManager,\r\n            \"FeeManager: Only the protocol manager is allowed\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @param _protocolManager the address of the Protocol Manager\r\n     * @param _fee the transaction fee\r\n     * @param _USDC USDC token address\r\n     * @param _USDT USDT token address\r\n     */\r\n    constructor(uint8 _fee, address _protocolManager, address _USDC, address _USDT) {\r\n        require(_protocolManager != address(0x00), \"FeeManager: Invalid mannagers address\");\r\n        require(_fee != 0, \"FeeManager: Invalid fee\");\r\n\r\n        s_protocolManager = _protocolManager;\r\n        s_feeManager = _protocolManager;\r\n        s_transactionFee = _fee;\r\n\r\n        i_USDC = _USDC;\r\n        i_USDT = _USDT;\r\n    }\r\n\r\n    /*** MAIN FUNCTIONS ***/\r\n\r\n    /*** COLLECT FEES RELATED ***/\r\n    /**\r\n     * @notice Called when a stream or instant payment is created\r\n     * @param depositAmount the amount of fee collected\r\n     * @param tokenAddress the  token address\r\n     * @dev No need to check depositAmount because the amount is require to be bigger than zero\r\n     * when you create a stream\r\n     */\r\n    function collectFee(uint256 depositAmount, address tokenAddress) external {\r\n        uint256 _feeCollected = (depositAmount * s_transactionFee) / 100;\r\n\r\n        //uint256 _feeCollected = depositAmount - realAmount;\r\n\r\n        s_protocolBalanceByToken[tokenAddress] += _feeCollected;\r\n\r\n        IERC20 token = IERC20(tokenAddress);\r\n\r\n        token.safeTransferFrom(msg.sender, address(this), _feeCollected);\r\n\r\n        emit FeeCollected(_feeCollected, tokenAddress);\r\n    }\r\n\r\n    /*** REDEEM FEES COLLECTED RELATED ***/\r\n    /**\r\n     * @notice A method to withdraw balance from only one token\r\n     * @param tokenToWithdraw The token itself\r\n     * @dev It fails if there is no balance in the token\r\n     */\r\n    function withdrawFees(address tokenToWithdraw) external onlyFeeManager nonReentrant {\r\n        require(\r\n            s_protocolBalanceByToken[tokenToWithdraw] > 0,\r\n            \"FeeManager: Zero balance for this token\"\r\n        );\r\n\r\n        uint256 toWithdraw = s_protocolBalanceByToken[tokenToWithdraw];\r\n\r\n        s_protocolBalanceByToken[tokenToWithdraw] = 0;\r\n\r\n        IERC20 token = IERC20(tokenToWithdraw);\r\n\r\n        token.safeTransfer(s_feeManager, toWithdraw);\r\n    }\r\n\r\n    /*** NEW SETTINGS RELATED ***/\r\n    /**\r\n     * @notice a function to set new managers to control the fees\r\n     * @param _newManager the new manager\r\n     */\r\n    function setNewFeeManager(address _newManager) external onlyProtocolManager {\r\n        require(\r\n            _newManager != address(0x00) && _newManager != address(this),\r\n            \"FeeManager: Invalid manager address\"\r\n        );\r\n        s_feeManager = _newManager;\r\n        emit NewFeeManager(_newManager);\r\n    }\r\n\r\n    /**\r\n     * @notice a function to set new transaction fees\r\n     * @param _newTransactionFee the new fee\r\n     */\r\n    function setNewTransactionFee(uint8 _newTransactionFee) external onlyFeeManager {\r\n        require(_newTransactionFee != 0 && _newTransactionFee <= 100, \"FeeManager: Invalid fee\");\r\n\r\n        s_transactionFee = _newTransactionFee;\r\n        emit NewTransactionFee(_newTransactionFee);\r\n    }\r\n\r\n    /*** VIEW / PURE FUNCTIONS ***/\r\n\r\n    function mustHaveBalance(uint256 deposit) external view returns (uint256) {\r\n        uint256 needed = deposit + ((deposit * s_transactionFee) / 100);\r\n        return needed;\r\n    }\r\n\r\n    function getProtocolManager() external view returns (address) {\r\n        return s_protocolManager;\r\n    }\r\n\r\n    function getFeeManager() external view returns (address) {\r\n        return s_feeManager;\r\n    }\r\n\r\n    function getTransactionFee() external view returns (uint256) {\r\n        return s_transactionFee;\r\n    }\r\n}\r\n"
    },
    "contracts/utils/FundUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.20;\r\n\r\ncontract FundUtils {\r\n    enum StreamStatus {\r\n        Active,\r\n        Paused,\r\n        Canceled,\r\n        Completed\r\n    }\r\n\r\n    /*\r\n     * It refer to an instant payment when:\r\n     * startTime === stopTime\r\n     * balanceLeft === 0\r\n     * StreamStatus === Completed\r\n     */\r\n    struct StreamData {\r\n        uint256 deposit;\r\n        uint256 balanceLeft; // If no withdraws must be equal to deposit\r\n        uint256 startTime;\r\n        uint256 stopTime;\r\n        address beneficiary;\r\n        address owner;\r\n        address tokenAddress;\r\n        StreamStatus status;\r\n    }\r\n\r\n    event WalletDeposit(uint256 deposit, address indexed token, address indexed user);\r\n\r\n    event WalletWithdraw(uint256 amount, address indexed token, address indexed user);\r\n\r\n    event NewStream(\r\n        uint256 indexed streamID,\r\n        address indexed owner,\r\n        address indexed beneficiary,\r\n        uint256 depositedAmount,\r\n        address token,\r\n        uint256 startTime,\r\n        uint256 stopTime,\r\n        StreamStatus status\r\n    );\r\n\r\n    event PauseStream(uint256 indexed streamID, address indexed owner, address indexed beneficiary);\r\n\r\n    event ResumeStream(\r\n        uint256 indexed streamID,\r\n        address indexed owner,\r\n        address indexed beneficiary,\r\n        bool paid\r\n    );\r\n\r\n    event CancelStream(\r\n        uint256 indexed streamID,\r\n        address indexed owner,\r\n        address indexed beneficiary,\r\n        uint256 ownerRemainingBalance,\r\n        uint256 beneficiaryRemainingBalance\r\n    );\r\n\r\n    event Withdraw(\r\n        uint256 indexed streamID,\r\n        address indexed owner,\r\n        address indexed beneficiary,\r\n        address recipient,\r\n        uint256 amount\r\n    );\r\n\r\n    event Completed(uint256 indexed streamID);\r\n}\r\n"
    },
    "contracts/wallet/UserWallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.20;\r\n\r\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport {FundUtils} from \"../utils/FundUtils.sol\";\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {IFeeManager} from \"../interfaces/IFeeManager.sol\";\r\n\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\ncontract UserWallet is ReentrancyGuard, FundUtils {\r\n    using SafeERC20 for IERC20;\r\n\r\n    address private s_protocolManager;\r\n\r\n    // Tokens allowed on protocol\r\n    address public immutable i_USDC;\r\n    address public immutable i_USDT;\r\n    IERC20 private immutable USDC;\r\n    IERC20 private immutable USDT;\r\n\r\n    // Fee manager\r\n    address private s_feeManager;\r\n    IFeeManager public feeManager;\r\n\r\n    // Funding wallet\r\n    // user => (tokenAddress => balance)\r\n    mapping(address => mapping(address => uint256)) public s_userBalanceByToken;\r\n\r\n    /**\r\n     * @notice To check the protocol Manager is the appropiate\r\n     */\r\n    modifier onlyProtocolManager() {\r\n        require(\r\n            msg.sender == s_protocolManager,\r\n            \"FeeManager: Only the protocol manager is allowed\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(address _USDC, address _USDT, address _protocolManager, address _feeManager) {\r\n        i_USDC = _USDC;\r\n        i_USDT = _USDT;\r\n\r\n        USDC = IERC20(i_USDC);\r\n        USDT = IERC20(i_USDT);\r\n\r\n        s_protocolManager = _protocolManager;\r\n\r\n        s_feeManager = _feeManager;\r\n        feeManager = IFeeManager(s_feeManager);\r\n\r\n        // Infinite approvals\r\n        USDC.safeIncreaseAllowance(address(feeManager), type(uint256).max);\r\n        USDT.safeIncreaseAllowance(address(feeManager), type(uint256).max);\r\n    }\r\n\r\n    /*** MAIN FUNCTIONS ***/\r\n    /*** WALLET RELATED ***/\r\n    /**\r\n     * @notice A method to fund the wallet\r\n     * @param deposit The amount to fund the wallet\r\n     * @param tokenAddress The token to fund\r\n     * @dev It fails if the token is not USDC or USDT\r\n     * @dev It fails if the deposit is \"0\"\r\n     */\r\n    function depositOnWallet(uint256 deposit, address tokenAddress) external returns (uint256) {\r\n        require(deposit != 0, \"Wallet: Zero amount\");\r\n        require(tokenAddress == i_USDC || tokenAddress == i_USDT, \"Wallet: Only USDC and USDT\");\r\n\r\n        s_userBalanceByToken[msg.sender][tokenAddress] += deposit;\r\n\r\n        IERC20 token = IERC20(tokenAddress);\r\n        token.safeTransferFrom(msg.sender, address(this), deposit);\r\n\r\n        emit WalletDeposit(deposit, tokenAddress, msg.sender);\r\n        return deposit;\r\n    }\r\n\r\n    /**\r\n     * @notice A method to withdraw from wallet\r\n     * @param amount The amount to withdraw from wallet\r\n     * @param tokenAddress The token to withdrw\r\n     * @dev It fails if the token is not USDC or USDT\r\n     * @dev It fails if the amount is \"0\"\r\n     * @dev It fails if the user does not have enough balance\r\n     */\r\n    function withdrawFromWallet(\r\n        uint amount,\r\n        address tokenAddress\r\n    ) external nonReentrant returns (uint256) {\r\n        require(amount != 0, \"Wallet: Zero amount\");\r\n        require(tokenAddress == i_USDC || tokenAddress == i_USDT, \"Wallet: Only  USDC and USDT\");\r\n        require(\r\n            s_userBalanceByToken[msg.sender][tokenAddress] >= amount,\r\n            \"Wallet: Not enough balance\"\r\n        );\r\n\r\n        s_userBalanceByToken[msg.sender][tokenAddress] -= amount;\r\n\r\n        IERC20 token = IERC20(tokenAddress);\r\n        token.safeTransfer(msg.sender, amount);\r\n\r\n        emit WalletWithdraw(amount, tokenAddress, msg.sender);\r\n        return amount;\r\n    }\r\n\r\n    /*** FEE MANAGER RELATED ***/\r\n\r\n    function setNewFeeManagerAddress(address newManager) external onlyProtocolManager {\r\n        require(\r\n            newManager != address(0x00) && newManager != s_feeManager && newManager != msg.sender,\r\n            \"Wallet: Invalid Manager address\"\r\n        );\r\n\r\n        // Resetting to zero the actual feeManager\r\n        USDC.safeDecreaseAllowance(address(feeManager), 0);\r\n        USDT.safeDecreaseAllowance(address(feeManager), 0);\r\n\r\n        // Set the new feeManager and infinite approves to every token\r\n        s_feeManager = newManager;\r\n        feeManager = IFeeManager(s_feeManager);\r\n\r\n        USDC.safeIncreaseAllowance(address(feeManager), type(uint256).max);\r\n        USDT.safeIncreaseAllowance(address(feeManager), type(uint256).max);\r\n    }\r\n\r\n    /*** VIEW / PURE FUNCTIONS ***/\r\n\r\n    /*** USER´S INFO ***/\r\n    /**\r\n     * @notice A method to know user´s balances\r\n     * @param token The token to know user´s balance\r\n     */\r\n    function getWalletBalance(address token) public view returns (uint256) {\r\n        return s_userBalanceByToken[msg.sender][token];\r\n    }\r\n\r\n    /*** TOKEN´S INFO ***/\r\n\r\n    function getUsdcAddress() public view returns (address) {\r\n        return i_USDC;\r\n    }\r\n\r\n    function getUsdtAddress() public view returns (address) {\r\n        return i_USDT;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}